{"version":3,"sources":["svg_clj/layout.cljc"],"mappings":";AAMA,mCAAA,nCAAMA,8EACHC,SAASC,IAAIC;AADhB,AAEE,IAAMC,MAAI,iBAAAC,WAAA,2CAAA,+DAAA,hBAAcC,gEAASC;AAAvB,AAAA,wFAAAF,+BAAAA,/GAACJ,yCAAAA,mDAAAA;;IACLO,YACA,AAACC,mDAAWC,iBACA,4CAAA,WAAAC,iBAAAC,xEAACC;AAAD,AAAM,QAAA,CAAG,CAAG,iBAAAC,WAAK,2BAAAH,3BAACI;AAAN,AAAA,8EAAAD,0BAAAA,hGAACV,oCAAAA,8CAAAA;OAAJ,OACA,CAAG,iBAAAY,WAAK,2BAAAJ,3BAACG;AAAN,AAAA,8EAAAC,0BAAAA,hGAACZ,oCAAAA,8CAAAA;OAAJ,QAA4BF;GAChCC,MAAM,AAACc,eAAKd;AALnC,AAME,OAACe,0GACA,AAACC,6CACA,4CAAA,WAAAC,iBAAAC,xEAACR;AAAD,AACE,kEAAAO,3DAACE,4EAAgB,yGAAA,mFAAAD,iBAAA,YAAA,mFAAA,IAAAA,9SAAI,sDAAA,tDAACE,6CAAEtB;GAEI,AAACgB,eAAKd,OAAOK,WAC3C,AAACF,gBAAMH;;AAEb,mCAAA,nCAAMqB,8EACHrB,MAAMsB;AADT,AAEE,OAACP,0GAAK,4CAAA,WAAAQ,iBAAAC,xEAACd;AAAD,AAAa,kEAAAa,iBAAAC,5EAACL;GAAkBnB,MAAMsB;;AAE9C,qCAAA,rCAAMG,kFACHzB,MAAM0B;AADT,AAEE,UAAA,NAAMC;IACAC,IAAE,iEAAA,/DAAI,0BAAA,zBAAG,AAACC,gBAAM7B,eAAU,0BAAA,zBAAK,AAAC6B,gBAAM7B;IACtC8B,KAAG,WAAKC,KAAKC;AAAV,AACE,IAAMA,QAAE,kCAAA,iBAAA,jDAAM,CAAI,CAAA,MAAKL,QAAKK,IAAG,CAAA,MAAKL,OACtB,CAAGA,MAAIK,IAAGL,IACJK;;IACdJ,QAAE,AAACK,mDAAa,iBAAAC,WAAO,CAAGF,QAAEL;AAAZ,AAAA,kFAAAO,4BAAAA,tGAACR,sCAAAA,gDAAAA;KAAiB,iBAAAS,WAAO,CAAGH,QAAEL;AAAZ,AAAA,kFAAAQ,4BAAAA,tGAACT,sCAAAA,gDAAAA;;IACnCU,IAAE,mCAAA,mFAAA,IAAA,YAAA,mFAAA,IAAA,7NAACC,6BAAqBT;IACxBU,IAAE,4CAAA,WAAAC,vDAAC7B;AAAD,AAAM,yDAAA6B,iBAAA,nEAACC;GAAiB,AAACC,wBAAgB,AAACC,0DAAYX,MAAMK;AALpE,0HAMML,xDACA,AAACY,6DAAUP,/HACX,OAACjB,2HAAa,AAACyB,iBAAS,CAAClB,sCAAAA,6CAAAA,TAAMM,yBAAAA,QAAGM,EAAE,AAACI,0DAAYX;;AAXlE,AAYE,mDAAA,WAAAc,iBAAAC,xEAACpC;AAAD,AAAM,UAAAmC,HAACf,oBAAa,CAAAgB,mBAAMlB;GAAK5B,MAAM,8CAAA,9CAAC+C,kDAAQ,KAAA,JAAKnB;;AAEvD,gCAAA,hCAAMoB,wEACHjB,KAAKT;AADR,AAEE,OAACP,0GAAK,4CAAA,WAAAkC,vDAACvC;AAAD,kEAAUqB,lEAAK,uEAAAkB,hEAAC9B;GAAiBG;;AAEzC,kCAAA,lCAAM4B,4EACHnB,KAAKL,MAAME;AADd,AAEE,IAAMuB,OAAK,CAAA,MAAOvB;AAAlB,AACE,mDAAA,WAAAwB,vDAAC1C;AAAD,kEAAUqB,lEAAK,OAACZ,gEAAa,2EAAAiC,oCAAAA,9GAAC1B,sCAAAA,wDAAAA;GAAW,8CAAA,IAAA,lDAACqB,sDAAYI","names":["svg-clj.layout/distribute-linear","axis-key","gap","items","dir","G__38346","cljs.core/first","cljs.core/second","distances","cljs.core.reductions","cljs.core/+","p1__38342#","p2__38343#","cljs.core.map","G__38349","svg-clj.transforms/bb-dims","G__38350","cljs.core/rest","svg_clj.elements.g","cljs.core.conj","p1__38344#","p2__38345#","svg-clj.transforms/translate","cljs.core._EQ_","svg-clj.layout/distribute-on-pts","pts","p1__38351#","p2__38352#","svg-clj.layout/distribute-on-curve","curve","eps","n","cljs.core/count","xf","item","t","svg_clj.utils.normal","G__38367","G__38369","a","svg-clj.utils/angle-from-pts","o","p1__38362#","svg_clj.utils.round","svg-clj.utils/rotate-pt","svg-clj.transforms/centroid","svg-clj.transforms/rotate","svg-clj.utils/v-","p1__38363#","p2__38364#","cljs.core.range","svg-clj.layout/pattern-on-pts","p1__38371#","svg-clj.layout/pattern-on-curve","step","p1__38375#"],"sourcesContent":["(ns svg-clj.layout\n  \"Provides functions for layout control of elements.\"\n  (:require [svg-clj.elements :as el]\n            [svg-clj.utils :as utils]\n            [svg-clj.transforms :as tf]))\n\n(defn distribute-linear\n  [axis-key gap items]\n  (let [dir (axis-key {:x first :y second})\n        distances\n        (reductions +\n                    (map #(+ (/ (dir (tf/bb-dims %1)) 2)\n                             (/ (dir (tf/bb-dims %2)) 2) gap)\n                         items (rest items)))]\n    (el/g\n     (conj \n      (map\n       #(tf/translate %1 (if (= axis-key :x) \n                           [%2 0]\n                           [0 %2])) (rest items) distances)\n      (first items)))))\n\n(defn distribute-on-pts\n  [items pts]\n  (el/g (map #(-> %1 (tf/translate %2)) items pts)))\n\n(defn distribute-on-curve\n  [items curve]\n  (let [eps 0.000001\n        n (if (> (count items) 1) (dec (count items)) 1)\n        xf (fn [item t]\n             (let [t (cond (<= (- 1 eps) t) (- 1 eps)\n                           (> eps t) eps\n                           :else t)\n                   n (utils/normal (curve (- t eps)) (curve (+ t eps)))\n                   a (utils/angle-from-pts n [0 0] [0 1])\n                   o (map #(utils/round % 4) (utils/rotate-pt (tf/centroid item) a))]\n               (-> item\n                   (tf/rotate a)\n                   (tf/translate (utils/v- (curve t) o (tf/centroid item))))))]\n    (map #(xf %1 (float (/ %2 n))) items (range 0 (inc n)))))\n\n(defn pattern-on-pts\n  [item pts]\n  (el/g (map #(-> item (tf/translate %)) pts)))\n\n(defn pattern-on-curve\n  [item curve n]\n  (let [step (/ 1.0 n)]\n    (map #(-> item (tf/translate (curve %))) (range 0 1.0 step))))\n"]}