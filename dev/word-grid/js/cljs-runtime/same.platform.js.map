{"version":3,"sources":["same/platform.cljc"],"mappings":";AAKA,AAAKA,0BAEM,AAAaC;AAExB;;;gCAAA,hCAAMC,wEAEHC;AAFH,AAIW,OAACC,uBAAOD;;AAEnB;;;2BAAA,3BAAME,8DAEHC;AAFH,AAIW,OAACC,MAASD;;AAErB;;;qBAAA,rBAAME,kDAEHF;AAFH,AAIW,GACE,KAAA,JAAGA;AADL;;AAAA,GAEE,KAAA,JAAGA;AAFL;;AAAA,oBAGE,AAACD,yBAAKC;AAAGA;;AAHX,AAAA;;;;;;AAMX;;;mCAAA,nCAAMG,8EAEHH;AAFH,AAIW,OAACI,0BAAUJ;;AAEtB;;;yBAAA,zBAAMK,0DAEHL;AAFH,AAIW,IAAMM,MAAI,KAAAC,aAAA;AAAV,AACE,KAAA,JAAMD,WAAMN;;AACZ,YAAA,JAAMM;;AAGhB,0BAAA,1BAAOE,4DACJR;AADH,AAEE,IAAMA,QAAkB,AAACS,SAAiBT;IACpCU,UAAU,SAAA,IAAA,bAACC;IACXC,YAAU,CAAG,CAAA,MAAOF,WAAS,SAAA,IAAA,bAACC;IAC9BE,UAAU,SAAA,IAAA,bAACF;AAHjB,AAIE,oBACE,AAACZ,yBAAKC;AAAWA;;AADnB,GAEE,AAACG,iCAAaH;AAAGA;;AAFnB,GAGE,AAACc,6CAAEF,UAAUZ;AAAIa;;AAHnB,AAKE,IAAME,MAAI,KAAAC,YAAA;IACJC,KAAI,KAAAC,SAAcH;IAClBI,IAAI,cAAA,dAAaF,kBAAKjB;IACtBoB,KAAI,aAAA,bAAYH;IAChBI,KAAI,aAAA,bAAYJ;IAChBE,QAAI,aAAA,bAAYF,iBAAK,MAAA,LAAKI;IAC1BF,QAAI,iEAAA,6BAAA,5FAAM,gDAAA,hDAACL,6CAAEO,kBACP,aAAA,bAAYJ,iBAAK,MAAA,LAAKG;AAPlC,AAQE,QAAG,cAAA,dAAaH,qBAAMjB;;;;;;AAEjC;;;oBAAA,pBAAMsB,gDAEHtB;AAFH,AAMW,OAACQ,wBAAKR;;AAEjB;;;gCAAA,hCAAMuB,wEAEHC,GAAGC;AAFN,AAKW,IAAMV,MAAI,KAAAC,YAAA;IACJC,KAAI,KAAAC,SAAcH;AADxB,AAEE,cAAA,dAAaE,kBAAaO;;AAC1B,cAAA,dAAaP,kBAAaQ;;AAC1B,OAAChB,SACA,CAAG,2CAAA,1CAAG,CAAG,aAAA,bAAYQ,oBAAM,aAAA,bAAYA,qCACpC,CAAG,aAAA,bAAYA,oBAAM,aAAA,bAAYA;;AAElD;;;+BAAA,/BAAMS,sEAEHF,GAAGC;AAFN,AAKW,IAAMV,MAAI,KAAAC,YAAA;IACJC,KAAI,KAAAC,SAAcH;AADxB,AAEE,cAAA,dAAaE,kBAAYO;;AACzB,cAAA,dAAaP,kBAAYQ;;AACzB,OAAChB,SAAS,CAAG,aAAA,bAAYQ,oBAAM,aAAA,bAAYA","names":["same.platform/max-value","js/Number","same.platform/is-array?","a","cljs.core/array?","same.platform/nan?","f","js/isNaN","same.platform/sign","same.platform/is-infinite?","cljs.core/infinite?","same.platform/to-float","arr","js/Float32Array","same.platform/ulp*","Math/abs","epsilon","Math/pow","max-value","max-ulp","cljs.core._EQ_","buf","js/ArrayBuffer","dv","js/DataView","_","hi","lo","same.platform/ulp","same.platform/bit-diff-double","f1","f2","same.platform/bit-diff-float"],"sourcesContent":[";; Copyright (c) Microsoft Corporation. All rights reserved.\n;; Licensed under the MIT License.\n(ns same.platform\n  \"Platform-specific code, to try to minimise reader conditionals in the rest of the codebase.\")\n\n(def max-value\n  #?(:clj (Double/MAX_VALUE)\n     :cljs (.-MAX_VALUE js/Number)))\n\n(defn is-array?\n  \"Return true if `a` is an array.\"\n  [a]\n  #?(:clj (and a (.isArray ^Class (type a)))\n     :cljs (array? a)))\n\n(defn nan?\n  \"Return true if `f` is NaN (Not-a-Number)\"\n  [f]\n  #?(:clj (Double/isNaN (double f))\n     :cljs (js/isNaN f)))\n\n(defn sign\n  \"Return the sign of `f` (+1 if positive, -1 if negative, 0 if zero or NaN if NaN).\"\n  [f]\n  #?(:clj (Math/signum (double f))\n     :cljs (cond\n             (< f 0) -1\n             (> f 0)  1\n             (nan? f) f\n             :else    0)))\n\n(defn is-infinite?\n  \"Return true if `f` is infinite.\"\n  [f]\n  #?(:clj (Double/isInfinite (double f))\n     :cljs (infinite? f)))\n\n(defn to-float\n  \"Round `f` to a single precision (32-bit) float.\"\n  [f]\n  #?(:clj (float f)\n     :cljs (let [arr (js/Float32Array. 1)]\n             (aset arr 0 f)\n             (aget arr 0))))\n\n#?(:cljs\n   (defn- ulp*\n     [f]\n     (let [f         (double (Math/abs (double f)))\n           epsilon   (Math/pow 2.0 -52)\n           max-value (* (- 2.0 epsilon) (Math/pow 2.0 1023))\n           max-ulp   (Math/pow 2.0 971)]\n       (cond\n         (nan? f)         f\n         (is-infinite? f) f\n         (= max-value f)  max-ulp\n         :else\n         (let [buf (js/ArrayBuffer. 8)\n               dv  (js/DataView. buf)\n               _   (.setFloat64 dv 0 f)\n               hi  (.getUint32 dv 0)\n               lo  (.getUint32 dv 4)\n               _   (.setUint32 dv 4 (inc lo))\n               _   (when (= lo 0xffffffff)\n                     (.setUint32 dv 0 (inc hi)))]\n           (- (.getFloat64 dv 0) f))))))\n\n(defn ulp\n  \"Units in the Last Place (ULP) of `f` (difference between f and the next largest representable number).\"\n  [f]\n  #?(:clj (if (instance? Float f)\n            (Math/ulp (float f))\n            (Math/ulp (double f)))\n     :cljs (ulp* f)))\n\n(defn bit-diff-double\n  \"Difference between two doubles in ULPs (i.e. number of representable numbers between them + 1).\"\n  [f1 f2]\n  #?(:clj (Math/abs ^long (- (Double/doubleToLongBits f1)\n                             (Double/doubleToLongBits f2)))\n     :cljs (let [buf (js/ArrayBuffer. 16)\n                 dv  (js/DataView. buf)]\n             (.setFloat64 dv 0 (double f1))\n             (.setFloat64 dv 8 (double f2))\n             (Math/abs\n              (+ (* (- (.getUint32 dv 0) (.getUint32 dv 8)) 0x100000000)\n                 (- (.getUint32 dv 4) (.getUint32 dv 12)))))))\n\n(defn bit-diff-float\n  \"Difference between two floats in ULPs (i.e. number of representable numbers between them + 1).\"\n  [f1 f2]\n  #?(:clj (Math/abs ^long (- (Float/floatToIntBits f1)\n                             (Float/floatToIntBits f2)))\n     :cljs (let [buf (js/ArrayBuffer. 8)\n                 dv  (js/DataView. buf)]\n             (.setFloat32 dv 0 (float f1))\n             (.setFloat32 dv 4 (float f2))\n             (Math/abs (- (.getUint32 dv 0) (.getUint32 dv 4))))))\n"]}