{"version":3,"sources":["svg_clj/utils.cljc"],"mappings":";AASA,qCAAA,rCAAeA;AAEf,AAAKC,oBAAiCC;AACtC,AAAKC,oBAAoCC;AAEzC,AAAA;;;sBAAA,8BAAAC,pDAAME;AAAN,AAAA,IAAAD,WAAA,AAAA;AAAA,AAAA,QAAAA;KAAA;AAAA,OAAAC,kDAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,kDAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;;AAAA,MAAA,KAAAC,MAAA,CAAA,8DAAA,AAAA;;;;;AAAA,CAAA,oDAAA,pDAAMD,+DAEFE;AAFJ,AAGG,OAACC,kDAAMD,IAAIT;;;AAHd,CAAA,oDAAA,pDAAMO,+DAIFE,IAAIE;AAJR,AAKG,oBAAIA;AACF,IAAMC,IACW,SAAA,TAACC,cAAYF;AAD9B,AAEU,QAAG,AAACG,WAAW,CAAGL,MAAIG,MAAIA;;AACpCH;;;;AATL,CAAA,8CAAA,9CAAMF;;AAAN,AAYA,AAAKQ,wBAAG,AAACC,gDAAQC,eAAKC;AACtB,AAAKC,mBAAG,AAACH,gDAAQC,eAAKG;AACtB,AAAKC,wBAAG,AAACL,gDAAQC,eAAKK;AAGtB,uBAAA,vBAAMC,sDACHC;AADH,AAEE,OAACd,kDAAM,CAAGc,MAAI,CAAA,QAAOC;;AAEvB,uBAAA,vBAAMC,sDACHC;AADH,AAEE,OAACjB,kDAAM,CAAGiB,MAAI,WAAA,VAAGF;;AAEnB,AAAA,wBAAA,gCAAApB,xDAAM4B;AAAN,AAAA,IAAAL,qBAAA;AAAA,AAAA,IAAAC,0BAAA,AAAA;AAAA,AAAA,IAAAC,wBAAA;;AAAA,AAAA,GAAA,CAAAA,wBAAAD;AAAA,AAAA,AAAAD,wBAAA,CAAA,UAAAE;;AAAA,eAAA,CAAAA,wBAAA;;;;AAAA;;;;AAAA,IAAAC,uBAAA,EAAA,CAAA,MAAA,AAAAH,4BAAA,AAAA,KAAAI,qBAAA,AAAAJ,yBAAA,KAAA,IAAA,OAAA;AAAA,AAAA,OAAAK,2DAAAF;;;AAAA,AAAA,CAAA,6DAAA,7DAAME,wEACDI;AADL,AAEE,IAAMC,IAAE,AAACC,gBAAMF;AAAf,AACE,OAAC3B,kDAAM,CAAG,AAAC8B,8CAAMtB,iBAAEmB,WAASC;;;AAHhC,CAAA,gDAAA,hDAAML;;AAAN;AAAA,CAAA,0CAAA,WAAAC,rDAAMD;AAAN,AAAA,IAAAE,qBAAA;AAAA,AAAA,OAAAA,wDAAA,AAAAC,cAAAF;;;AAAA,AAMA;;;wBAAA,xBAAMO,wDAEHC;AAFH,AAGE,yDAAA,lDAACC,sDAAaD;;AAEhB;;;wBAAA,xBAAME,wDAEHC;AAFH,AAOM,OAAA,WAAAO;AAAA,AAAE,4EAAAA,rEAACC,6CAAKC;GADR,AAAA,WAAAN;AAAA,AAAE,mGAAAA,5FAACC,+CAAO,AAACC,qBAAWC;0EAHtBN,pBACA,AAACC,nDACD,0EAAA,1EAACC;;AAIP,8BAAA,sCAAAQ,pEAAMG;AAAN,AAAA,IAAAF,aAAAD;QAAA,AAAAE,4CAAAD,WAAA,IAAA,/DACIG;QADJ,AAAAF,4CAAAD,WAAA,IAAA,/DACMd;AADN,AAEE,oDAAK,AAACkB,+CAAOD,gDAAG,AAACnB,8CAAMqB,eAAKnB;;AAE9B,8BAAA,9BAAMoB,oEACHjB;AADH,AAEE,IAAMkB,QAAM,qDAAA,rDAAChB,mDAAUF;IACjBmB,MAAI,AAACC,gDAAQ,AAACC,gBAAMH;IACpBI,MAAI,AAACC,cAAI,AAACC,sDAAY,CAAA,gDAAS,AAACC,iBAAOP;AAF7C,AAAA,0FAGGC,IAAIG;;AAET;;;;;+BAAA,/BAAMI,sEAIHC;AAJH,AAKE,yDAAA,lDAAC7B,uDAAc,AAAC8B,4CAAIf,4BAAWc;;AAEjC,+BAAA,/BAAME,sEACH7B;AADH,AAEE,IAAA8B,qBAAW9B;AAAX,AAAA,oBAAA8B;AAAA,YAAAA,RAAS9B;AAAT,AACE,oDAAA,7CAAC+B,mPAEU,AAAA,WAAAC,tCACAE,hEACA,gEAAA,hEAACN,4CAAI3B,pHACL,AAAC2B,4CAAIX;AAHL,AAAE,8BAAAe,iBAAA,KAAA,7CAACC;GADHjC;;AAFb;;;AASF;;;0BAAA,1BAAMmC,4DAEHC,GAAGtD;AAFN,AAGE,IAAAuD,aAAYD;QAAZ,AAAAxB,4CAAAyB,WAAA,IAAA,/DAAOC;QAAP,AAAA1B,4CAAAyB,WAAA,IAAA,/DAASE;IACHC,IAAE,AAACC,SAAS,AAAC5D,qBAAOC;IACpBkB,IAAE,AAAC0C,SAAS,AAAC7D,qBAAOC;AAF1B,AAAA,0FAGG,AAACjB,kDAAM,CAAG,CAAGyE,IAAEE,KAAG,CAAGD,IAAEvC,KACvB,AAACnC,kDAAM,CAAG,CAAGyE,IAAEtC,KAAG,CAAGuC,IAAEC;;AAE5B;;;wCAAA,xCAAMG,wFAEHP,GAAGtD,IAAI8D;AAFV,2EAGMR,tBACA,AAAClE,yBAAG,AAAC0D,4CAAIrD,YAAEqE,zGACX,AAACT,kHAAUrD,/IACX,OAACZ,6IAAG0E;;AAEV;;;yBAAA,zBAAMC,0DAEHC,EAAEC;AAFL,AAGE,IAAMlD,IAAE,AAACvB,iBAAGyE,EAAED;IACRE,KAAG,AAACC,+CAAO5E,iBAAE,AAACG,sBAAGqB,EAAEA;AADzB,AAEE,OAAChC,kDAAM,AAACqF,UAAUF;;AAEtB,iCAAA,jCAAMG,0EACHL,EAAEC;AADL,AAEE,IAAMlD,IAAE,AAACvB,iBAAGyE,EAAED;AAAd,AACE,OAACG,+CAAO5E,iBAAE,AAACG,sBAAGqB,EAAEA;;AAEpB,4BAAA,5BAAMuD,gEACHN,EAAEC;AADL,AAEE,QAAG,CAAG,AAAC1B,gBAAMyB,KAAG,AAACrB,iBAAOsB,MACrB,CAAG,AAACtB,iBAAOqB,KAAG,AAACzB,gBAAM0B;;AAK1B,8BAAA,sCAAAM,pEAAME;AAAN,AAAA,IAAAD,aAAAD;QAAA,AAAAzC,4CAAA0C,WAAA,IAAA,/DACIhB;QADJ,AAAA1B,4CAAA0C,WAAA,IAAA,/DACMf;AADN,AAAA,0FAEG,GAAGA,GAAGD;;AAET;;;0BAAA,1BAAMkB,4DAEHV,EAAEC;AAFL,AAGE,OAACE,+CAAO5E,iBAAE,AAACuD,4CAAInD,iBAAEqE,EAAEC;;AAErB;;;4BAAA,5BAAMU,gEAEHX,EAAEC;AAFL,AAGE,IAAAW,aAAiBZ;SAAjB,AAAAlC,4CAAA8C,WAAA,IAAA,hEAAOE;SAAP,AAAAhD,4CAAA8C,WAAA,IAAA,hEAAUG;SAAV,AAAAjD,4CAAA8C,WAAA,IAAA,hEAAaI;IAAbH,aACiBZ;SADjB,AAAAnC,4CAAA+C,WAAA,IAAA,hEACOI;SADP,AAAAnD,4CAAA+C,WAAA,IAAA,hEACUK;SADV,AAAApD,4CAAA+C,WAAA,IAAA,hEACaM;IACPH,SAAG,yBAAA,PAAIA,IAAGA;IACVG,SAAG,yBAAA,PAAIA,IAAGA;IACVC,IAAE,CAAG,CAAGL,KAAGI,UAAI,CAAGH,SAAGE;IACrBG,IAAE,CAAG,CAAGL,SAAGC,MAAI,CAAGH,KAAGK;IACrBnD,IAAE,CAAG,CAAG8C,KAAGI,MAAI,CAAGH,KAAGE;AAN3B,AAAA,0FAOGG,EAAEC,EAAErD;;AAET;;;8BAAA,sCAAAsD,SAAAC,7EAAMG;AAAN,AAAA,IAAAF,aAAAF;SAAA,AAAAxD,4CAAA0D,WAAA,IAAA,hEAEIG;SAFJ,AAAA7D,4CAAA0D,WAAA,IAAA,hEAEOI;IAFPH,aAAAF;SAAA,AAAAzD,4CAAA2D,WAAA,IAAA,hEAEYI;SAFZ,AAAA/D,4CAAA2D,WAAA,IAAA,hEAEeK;AAFf,AAGE,QAAG,CAAGH,KAAGG,MAAI,CAAGF,KAAGC;;AAErB;;;0BAAA,1BAAME,4DAEHhF;AAFH,AAGE,IAAM8B,IAAE,AAACuB,UAAU,AAACD,+CAAO5E,iBAAE,AAACG,sBAAGqB,EAAEA;AAAnC,AACE,oDAAAiF,7CAACtE,+DAAOX,EAAE,AAACkF,+CAAOpD;;AAEtB,AAAA;;;uBAAA,+BAAAnE,tDAAMyH;AAAN,AAAA,IAAAD,WAAA,AAAA;AAAA,AAAA,QAAAA;KAAA;AAAA,OAAAC,mDAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,mDAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;;AAAA,MAAA,KAAAtH,MAAA,CAAA,8DAAA,AAAA;;;;;AAAA,CAAA,qDAAA,rDAAMsH,gEAEFnC,EAAEC;AAFN,AAGG,IAAAmC,aAAcpC;SAAd,AAAAlC,4CAAAsE,WAAA,IAAA,hEAAOE;SAAP,AAAAxE,4CAAAsE,WAAA,IAAA,hEAAUG;IAAVF,aACcpC;SADd,AAAAnC,4CAAAuE,WAAA,IAAA,hEACOG;SADP,AAAA1E,4CAAAuE,WAAA,IAAA,hEACUI;IACJC,KAAG,CAAGF,KAAGF;IACTK,KAAG,CAAGF,KAAGF;AAHf,AAAA,0FAIG,GAAGI,IAAID;;;AAPb,CAAA,qDAAA,rDAAMP,gEAQFnC,EAAEC,EAAEP;AARR,AASG,IAAMkD,KAAG,AAACpH,iBAAGwE,EAAEC;IACT4C,KAAG,AAACrH,iBAAGwE,EAAEN;AADf,AAEE,OAACiB,0BAAOiC,GAAGC;;;AAXhB,CAAA,+CAAA,/CAAMV;;AAAN,AAcA;;;gCAAA,hCAAOW,wEAEJC,GAAGC,GAAGC;AAFT,AAGE,IAAMC,KAAG,AAAC1H,iBAAGuH,GAAGC;IACV9C,KAAG,AAAC1E,iBAAGyH,GAAGD;IACVG,KAAG,WAAAC;AAAA,AAAA,IAAAC,aAAAD;QAAA,AAAAtF,4CAAAuF,WAAA,IAAA,/DAAM7D;QAAN,AAAA1B,4CAAAuF,WAAA,IAAA,/DAAQ5D;AAAR,AACE,GAAM,EAAK,KAAA,JAAMD,cAAG,KAAA,JAAMC;AAA1B;;AAAA,GACM,EAAK,KAAA,JAAMD,cAAG,KAAA,JAAMC;AAD1B;;AAAA,GAEM,EAAK,KAAA,JAAMD,cAAG,KAAA,JAAMC;AAF1B;;AAAA,GAGM,EAAK,KAAA,JAAMD,cAAG,KAAA,JAAMC;AAH1B;;AAAA,GAIM,KAAA,JAAMD;AAJZ;;AAAA,GAKM,KAAA,JAAMA;AALZ;;AAAA,GAMM,KAAA,JAAMC;AANZ;;AAAA,GAOM,KAAA,JAAMA;AAPZ;;AAAA;;;;;;;;;;AAHX,AAWE,OAAC5C,8CAAMyG,cAAI,+CAAA,/CAACxE,4CAAIqE,sFAAID,GAAGhD;;AAE3B;;;;+BAAA,/BAAMqD,sEAGHR,GAAGC,GAAGC;AAHT,AAIE,IAAMC,KAAG,AAAC1H,iBAAGuH,GAAGC;IACV9C,KAAG,AAAC1E,iBAAGyH,GAAGD;IADhBQ,aAEkB,AAACzB,wBAAUmB;WAF7B,AAAApF,4CAAA0F,WAAA,IAAA,lEAEOE;WAFP,AAAA5F,4CAAA0F,WAAA,IAAA,lEAEYG;IAFZF,aAGkB,AAAC1B,wBAAU7B;WAH7B,AAAApC,4CAAA2F,WAAA,IAAA,lEAGOG;WAHP,AAAA9F,4CAAA2F,WAAA,IAAA,lEAGYI;IACNC,KAAG,AAAC/D,uBAASgD,GAAGC;IAChBe,KAAG,AAAChE,uBAASkD,GAAGD;IAChBrG,IAAE,AAAC+D,wBAAKwC,GAAGhD;IACXjF,IAAE,CAAG6I,KAAGC;AAPd,AAQE,GAAU,AAACC,oBAAgB/I;AAA3B;;AAAA,AACE,IAAM+E,IAAE,AAACpE,qBAAO,AAACqI,UAAU,CAAGtH,IAAE1B;IAC1BiJ,YAAU,AAACpB,8BAAgBC,GAAGC,GAAGC;AADvC,AAEE,GAEE,EAAK,6CAAA,7CAACkB,oDAASD,gBAAW,CAAGN,OAAKF;AAAO1D;;AAF3C,GAGE,EAAK,6CAAA,7CAACmE,oDAASD,gBAAW,CAAGN,OAAKF;AAAO1D;;AAH3C,GAIE,EAAK,6CAAA,7CAACmE,oDAASD,gBAAW,CAAGN,OAAKF;AAAO1D;;AAJ3C,GAKE,EAAK,6CAAA,7CAACmE,oDAASD,gBAAW,CAAGN,OAAKF;AAAO1D;;AAL3C,oBAOE,iBAAAoE,eAAA,iFAAA,YAAA,YAAA,YAAA;AAAA,AAAA,QAAAA,6CAAAA,wDAAAA,bAAgCF,oCAAAA;;AAAWlE;;AAP7C,oBAQE,iBAAAqE,eAAA,iFAAA,YAAA,YAAA;AAAA,AAAA,QAAAA,6CAAAA,wDAAAA,bAAyBH,oCAAAA;;AAAWlE;;AARtC,oBASE,iBAAAsE,eAAA,iFAAA,YAAA,YAAA;AAAA,AAAA,QAAAA,6CAAAA,wDAAAA,bAAyBJ,oCAAAA;;AAAWlE;;AATtC,oBAUE,iBAAAuE,eAAA,iFAAA,YAAA,YAAA;AAAA,AAAA,QAAAA,6CAAAA,wDAAAA,bAAyBL,oCAAAA;;AAAWlE;;AAVtC,oBAYE,iBAAAwE,eAAA,iFAAA,YAAA,YAAA,YAAA;AAAA,AAAA,QAAAA,6CAAAA,wDAAAA,bAAgCN,oCAAAA;;AAAWlE;;AAZ7C,oBAaE,iBAAAyE,eAAA,iFAAA,YAAA,YAAA,YAAA;AAAA,AAAA,QAAAA,6CAAAA,wDAAAA,bAAgCP,oCAAAA;;AAAWlE;;AAb7C,oBAcE,iBAAA0E,eAAA,iFAAA,YAAA,YAAA,YAAA;AAAA,AAAA,QAAAA,6CAAAA,wDAAAA,bAAgCR,oCAAAA;;AAAWlE;;AAd7C,oBAgBE,iBAAA2E,eAAA,iFAAA,YAAA,YAAA,YAAA;AAAA,AAAA,QAAAA,6CAAAA,wDAAAA,bAAgCT,oCAAAA;;AAAWlE;;AAhB7C,GAkBE,EAAK,6CAAA,7CAACmE,oDAASD,gBAAW,CAAG,AAACU,SAASlB,QAAM,AAACkB,SAAShB;AAAQ5D;;AAlBjE,GAmBE,EAAK,6CAAA,7CAACmE,oDAASD,gBAAW,CAAG,AAACU,SAASlB,QAAM,AAACkB,SAAShB;AAAQ5D;;AAnBjE,GAoBE,EAAK,6CAAA,7CAACmE,oDAASD,gBAAW,CAAG,AAACU,SAASlB,QAAM,AAACkB,SAAShB;AAAQ5D;;AApBjE,GAqBE,EAAK,6CAAA,7CAACmE,oDAASD,gBAAW,CAAG,AAACU,SAASlB,QAAM,AAACkB,SAAShB;AAAQ5D;;AArBjE,oBAuBE,iBAAA6E,eAAA,iFAAA,YAAA,YAAA,YAAA;AAAA,AAAA,QAAAA,6CAAAA,wDAAAA,bAAgCX,oCAAAA;;AAAWlE;;AAvB7C,AAwBQ,QAAA,QAAOA;;;;;;;;;;;;;;;;;;;;;AAEvB,kCAAA,0CAAA8E,SAAAC,rFAAMG;AAAN,AAAA,IAAAF,aAAAF;WAAA,AAAAhH,4CAAAkH,WAAA,IAAA,lEACIG;WADJ,AAAArH,4CAAAkH,WAAA,IAAA,lEACSI;IADTH,aAAAF;WAAA,AAAAjH,4CAAAmH,WAAA,IAAA,lEACgBI;WADhB,AAAAvH,4CAAAmH,WAAA,IAAA,lEACqBK;AADrB,AAEE,IAAAC,aAAcJ;SAAd,AAAArH,4CAAAyH,WAAA,IAAA,hEAAO5D;SAAP,AAAA7D,4CAAAyH,WAAA,IAAA,hEAAU3D;IAAV4D,aACcJ;SADd,AAAAtH,4CAAA0H,WAAA,IAAA,hEACO3D;SADP,AAAA/D,4CAAA0H,WAAA,IAAA,hEACU1D;IADV2D,aAEcJ;SAFd,AAAAvH,4CAAA2H,WAAA,IAAA,hEAEOE;SAFP,AAAA7H,4CAAA2H,WAAA,IAAA,hEAEUG;IAFVF,aAGcJ;SAHd,AAAAxH,4CAAA4H,WAAA,IAAA,hEAGOhD;SAHP,AAAA5E,4CAAA4H,WAAA,IAAA,hEAGU/C;YAHV,RAIMkD,2FAAO,CAAGlE,KAAGE,IAAI,CAAG8D,KAAGjD;YAJ7B,RAKMoD,2FAAO,CAAGlE,KAAGE,IAAI,CAAG8D,KAAGjD;IACvBoD,MAAI,AAACzF,0BAAYuF,MAAMC;AAN7B,AAOE,GAAU,AAAC9B,oBAAS,CAAC1J,kDAAAA,uDAAAA,PAAIyL,mCAAAA;AAAzB;;AAAA,AACE,WAAA,PAAMC,0FAAM,AAAC1F,0BAAY6E,KAAKC,MAAM,AAAC9E,0BAAY+E,KAAKC;IAChD9F,IAAE,CAAG,AAACc,0BAAY0F,KAAKH,SAAOE;IAC9BtG,IAAE,CAAG,AAACa,0BAAY0F,KAAKF,SAAOC;AAFpC,AAAA,0FAGGvG,EAAEC;;;AAEX,gCAAA,hCAAMwG,wEACHjG,EAAEC,EAAEP;AADP,AAEE,IAAMwG,KAAG,AAAC1K,iBAAGwE,EAAEC;IACTkG,KAAG,AAAC3K,iBAAGkE,EAAEO;UADf,NAEMmG;AAFN,AAGE,QAAGA,MAAI,iBAAAC,WAAK,AAAC3E,4BAASwE,GAAGC;AAAlB,AAAA,0GAAAE,wCAAAA,1IAAC/L,kDAAAA,4DAAAA;;;AAEZ,iCAAA,jCAAMgM,0EACHtG,EAAEC,EAAEP;AADP,AAEE,IAAMwG,KAAG,AAAC1K,iBAAGwE,EAAEC;IACTkG,KAAG,AAAC3K,iBAAGkE,EAAEO;UADf,NAEMmG;IACApI,IAAE,AAAC0D,4BAASwE,GAAGC;AAHrB,AAIE,GACE,CAAGC,MAAI,CAAC9L,kDAAAA,qDAAAA,LAAI0D,iCAAAA;AADd;;AAAA,GAEE,CAAGoI,MAAIpI;AAFT;;AAAA,GAGE,CAAG,GAAGoI,OAAKpI;AAHb;;AAAA;;;;;AASJ,iCAAA,yCAAAuI,1EAAME,mFACKnH;AADX,AAAA,IAAAkH,aAAAD;QAAA,AAAAzI,4CAAA0I,WAAA,IAAA,/DACIxG;QADJ,AAAAlC,4CAAA0I,WAAA,IAAA,/DACMvG;QADN,AAAAnC,4CAAA0I,WAAA,IAAA,/DACQ9G;AADR,AAEE,IAAMkD,KAAG,AAACpH,iBAAGyE,EAAED;IACTmG,KAAG,AAAC3K,iBAAGkE,EAAEO;IACTyG,KAAG,AAAClL,iBAAGwE,EAAEN;IACTiH,MAAI,AAACnL,iBAAG8D,GAAGU;IACX4G,MAAI,AAACpL,iBAAG8D,GAAGW;IACX4G,MAAI,AAACrL,iBAAG8D,GAAGI;AALjB,AAME,UACC,oDAAA,lDAAI,wCAAA,vCAAI,AAACgC,4BAASkB,GAAG+D,oBACjB,wCAAA,vCAAI,AAACjF,4BAASyE,GAAGS,kBACjB,wCAAA,vCAAI,AAAClF,4BAASgF,GAAGG;;AAE1B,sBAAA,8BAAAC,pDAAMK,6DACiBG;AADvB,AAAA,IAAAP,aAAAD;IAAAE,aAAA,AAAAvK,cAAAsK;IAAAE,eAAA,AAAA1I,gBAAAyI;IAAAA,iBAAA,AAAAE,eAAAF;QAAAC,JACIjJ;IADJiJ,mBAAA,AAAA1I,gBAAAyI;IAAAA,iBAAA,AAAAE,eAAAF;YAAAC,RACMG;cADNJ,VACcK;AADd,AAEE,oDAAA,7CAACpI,gIAAMjB,EAAE,AAACuJ,uGAAMH,MAAME,wBAAYD;;AAEpC;;;gCAAA,hCAAMG,wEAEHC;AAFH,AAGE,IAAMC,OAAK,AAAC9K,gBAAM,AAAC2B,gBAAM,AAACoJ,gDAAQ/K,gBAAM6K;IAClCG,SAAO,iBAAAC,qBAAA,sDAAAC;AAAA,AAAA,YAAAC,kBAAA,KAAA;AAAA,AAAA,IAAAD,eAAAA;;AAAA,AAAA,IAAAE,qBAAA,AAAAvL,cAAAqL;AAAA,AAAA,GAAAE;AAAA,AAAA,IAAAF,eAAAE;AAAA,AAAA,GAAA,AAAAC,6BAAAH;AAAA,IAAAI,kBA6pEoC,AAAA2H,sBAAA/H;IA7pEpCK,qBAAA,AAAAvL,gBAAAsL;IAAAE,WAAA,AAAAC,uBAAAF;AAAA,AAAA,GAAA,AAAA,iBAAAG,WAAA;;AAAA,AAAA,GAAA,CAAAA,WAAAH;AAAA,WAAA,AAAAI,eAAAL,gBAAAI,tCAAMS;AAAN,AAAA,AAAA,AAAAP,uBAAAJ,SACE,4CAAA,5CAACtJ;kBAADmK;AAAA,AAAM,mDAAAA,5CAACnL,6DAAMiL;;CAAMtB;;AADrB,eAAA,CAAAa,WAAA;;;;AAAA;;;;;AAAA,OAAAG,qBAAA,AAAAC,gBAAAN,UAAA,AAAAO,4CAAA,AAAAC,qBAAAd;;AAAA,OAAAW,qBAAA,AAAAC,gBAAAN,UAAA;;;AAAA,WAAA,AAAA7J,gBAAAuJ,vBAAMiB;AAAN,AAAA,OAAAF,eACE,4CAAA,5CAAC/J;kBAADmK;AAAA,AAAM,mDAAAA,5CAACnL,6DAAMiL;;MADf,AAAAJ,4CAAA,AAAAG,eAAAhB,hEACqBL;;;AADrB;;;;GAAA,KAAA;;AAAA,AAAA,OAAAI,mBAAW,8CAAA,9CAACmB,kDAAQtB;;AADjC,AAGE,oDAAA,WAAAwB,xDAACxL;AAAD,AAAO,2EAAAwL,pEAACrM,8CAAMP;GAAWsL;;AAE7B;;;8BAAA,9BAAMuB,oEAEH1B;AAFH,AAGE,IAAM2B,OAAK,AAACvM,8CAAMwM,cAAI,AAACvK,4CAAIP,gBAAMkJ;IAC3B6B,OAAK,AAACzM,8CAAMwM,cAAI,AAACvK,4CAAIH,iBAAO8I;IAC5B8B,OAAK,AAAC1M,8CAAM2M,cAAI,AAAC1K,4CAAIP,gBAAMkJ;IAC3BgC,OAAK,AAAC5M,8CAAM2M,cAAI,AAAC1K,4CAAIH,iBAAO8I;AAHlC,AAIE,YAAAiC,2BAAA,KAAA,EAAA,IAAA,AAAAA,sCAAA,CAAA,qGAAA,qGAAA,qGAAA,sGAAA,lUAASH,KAAKE,gGACLL,KAAKK,gGACLL,KAAKE,gGACLC,KAAKD;;AAElB,wBAAA,xBAAMK,wDACHlC;AADH,AAEE,IAAAmC,aAAoC,AAACT,4BAAc1B;IAAnDoC,aAAA,AAAA/L,4CAAA8L,WAAA,IAAA;WAAA,AAAA9L,4CAAA+L,WAAA,IAAA,lEAAQN;WAAR,AAAAzL,4CAAA+L,WAAA,IAAA,lEAAaJ;QAAb,AAAA3L,4CAAA8L,WAAA,IAAA,/DAAmBG;IAAnBD,aAAA,AAAAhM,4CAAA8L,WAAA,IAAA;WAAA,AAAA9L,4CAAAgM,WAAA,IAAA,lEAAsBV;WAAtB,AAAAtL,4CAAAgM,WAAA,IAAA,lEAA2BR;YAA3B,AAAAxL,4CAAA8L,WAAA,IAAA,nEAAiCG;AAAjC,AAAA,0FACG,CAAGX,OAAKG,MAAM,CAAGD,OAAKG;;AAE3B,4BAAA,oCAAAO,hEAAME,yEACGjP;AADT,AAAA,IAAAgP,aAAAD;QAAA,AAAAlM,4CAAAmM,WAAA,IAAA,/DACIjK;QADJ,AAAAlC,4CAAAmM,WAAA,IAAA,/DACMhK;AADN,AAEE,IAAMkK,IAAE,AAAC1J,4BAAc,AAACjF,iBAAGyE,EAAED;IACvBoK,KAAG,AAAC1O,sBAAG,AAACqG,wBAAUoI,GAAG,AAAClI,+CAAO,GAAGhH;IAChCoP,KAAG,AAACjP,sBAAG4E,EAAEoK;IACTE,KAAG,AAAClP,sBAAG6E,EAAEmK;AAHf,AAAA,0FAIGC,GAAGC;;AAER,4BAAA,5BAAOC,gEACJ9C;AADH,AAEE,IAAM9K,IAAE,AAACC,gBAAM6K;AAAf,AACE,OAAChJ,cAAI,AAAC+L,6CAAK7N,EAAE,kDAAA,IAAA,tDAAC8N,0DAAc,AAACC,gBAAMjD;;AAEvC,+BAAA,/BAAOkD,sEACJzN;AADH,AAEE,OAAC0N,6CAAK,AAACC,kDAAU3N,GAAG,AAAC4N,eAAK5N;;AAE5B,4BAAA,5BAAO6N,gEACJhO;AADH,AAEE,IAAMJ,IAAE,AAACC,gBAAMG;AAAf,AACE,mDAAA,WAAAiO,vDAAClM;AAAD,AAAM,qDAAAkM,9CAACC,4CAAIlO;GAAK,AAACO,+CAAO4N,sBAAM,AAAClC,8CAAMrM;;AAEzC,2BAAA,3BAAMwO,8DACH1D,IAAIxM;AADP,AAEE,IAAMmQ,QAAM,AAACb,0BAAY9C;IACnB4D,OAAK,sDAAA,WAAAC,jEAACC;AAAD,AAAS,iCAAAD,1BAACpB,2CAAcjP;qDAAGmQ;IAChCI,SAAO,AAACT,0BAAY,AAACR,0BAAYc;IACjCI,aAAW,AAAClB,0BAAYiB;AAH9B,AAIE,OAACb,6BAAe,4CAAA,WAAAe,vDAAC5M;AAAD,AAAM,qFAAA4M,9EAAC7O,8CAAMqI;GAAqBuG;;AAEtD,qCAAA,6CAAAE,SAAAC,SAAAC,pGAAMI;AAAN,AAAA,IAAAH,aAAAH;QAAA,AAAA7N,4CAAAgO,WAAA,IAAA,/DACItM;QADJ,AAAA1B,4CAAAgO,WAAA,IAAA,/DACMrM;IADNsM,aAAAH;SAAA,AAAA9N,4CAAAiO,WAAA,IAAA,hEACUG;SADV,AAAApO,4CAAAiO,WAAA,IAAA,hEACaI;IADbH,aAAAH;SAAA,AAAA/N,4CAAAkO,WAAA,IAAA,hEACkBrG;SADlB,AAAA7H,4CAAAkO,WAAA,IAAA,hEACqBpG;AADrB,AAAA,0FAEG,CAAG,CAAG,CAAGpG,IAAEmG,MAAIuG,MAAIvG,IACnB,CAAG,CAAG,CAAGlG,IAAEmG,MAAIuG,MAAIvG;;AAEtB,4BAAA,5BAAMwG,gEACHC;AADH,AAEE,QAAA,MAAK,AAAC1M,SAAS,iBAAA,hBAAG,CAAG7D,UAAQuQ;;AAE/B,6BAAA,7BAAMC,kEACHD;AADH,AAEE,OAACzM,SAAS,iBAAA,hBAAG,CAAG9D,UAAQuQ;;AAE1B,gCAAA,hCAAME,wEACHF;AADH,AAEE,0CAAA,lCAAG,2BAAA,1BAAG,AAAC1M,SAAS,CAAG7D,UAAQuQ;;AAE7B,+BAAA,/BAAMG,sEACHtP;AADH,AAEE,IAAMP,IAAE,iBAAA,AAAK,OAAC+B,sDAAYxB;gBAAlB,GAAA,CAAAuP,kBAEqBC;AAFrB,QAAAD,JAEgCE;AAFhC,AAEkCzP;;AAFlC,AAAA,MAAAuP;;;;AAAR,AAGE,GAAI,OAAS9P;AAAGA;;AAAEO;;;AAEtB,gCAAA,kFAAA,qDAAA,sDAAA,oDAAA,qDAAA,4DAAA,sDAAA,qDAAA,oDAAA,uDAAA,sDAAA,uDAAA,sDAAA,3vBAAK0P;AAQL;;;;qCAAA,rCAAMC,kFAGHC;AAHH,AAIE,GAAI,AAACtP,uBAAOsP;AAAZ;;AAEE,OAACjQ,8CAAMkQ,gBACA,AAACjO,4CACA,WAAAkO;AAAA,AAAA,IAAAC,aAAAD;QAAA,AAAAlP,4CAAAmP,WAAA,IAAA,/DAAMjP;QAAN,AAAAF,4CAAAmP,WAAA,IAAA,/DAAQlQ;AAAR,AACE,oBAAI,CAAC6P,8DAAAA,iEAAAA,LAAgB5O,6CAAAA;AAArB,uDACGA,EAAE,AAACwO,6BAAYzP;;AADlB,uDAEGiB,EAAEjB;;GACP+P;;;AAEZ,2BAAA,3BAAOI,8DACJb;AADH,AAEE,IAAMc,YAAU,AAACC,oBAAUf;IACrBgB,OAAK,AAACC,eAAKjB;AADjB,AAEE,oBAAIc;AACF,uKAAIA,nDACA,6DAAA,7DAAC/P,hBACDmB,7CACA,6CAAA,qFAAA,IAAS8O,tLACT/O;;AACJ+N;;;AAEN,+BAAA,/BAAMkB,sEACHC;AADH,AAEE,IAAAxO,qBAAW,AAAA,kFAAMwO;AAAjB,AAAA,oBAAAxO;AAAA,QAAAA,JAASqN;AAAT,AACE,WAAA,PAAMoB,0FAAM,AAACP,yBAAWb;IAClBoB,WAAK,AAAC7C,6CAAK6C,KAAK,AAACZ,mCAAqB,AAAA,sFAAQW;AADpD,AAEE,OAACvO,6CAAKwO,SAAK,AAAC3O,4CAAIyO,6BAAY,AAACG,+CAAOC,wBAAQ,AAAA,uFAAUH;;AACxDA;;;AAEJ;;;mCAAA,nCAAMI,8EAEHC;AAFH,AAGE,oGAAIA,hEACA,0HAAA,4EAAA,tMAACC,7BACDP;;AAEN;;;;0BAAA,1BAAOQ,4DAGJC,OAAOC;AAHV,AAIE,IAAOC,MAAIF;UAAX,NACOG;;AADP,AAEE,GAAI,AAACC,uBAASF;AACZC;;AACA,oBAAI,CAACF,wCAAAA,6CAAAA,PAAQC,yBAAAA;AACX,eAAO,AAACG,iBAASH;eAAK,AAACtD,6CAAKuD,IAAI,AAACG,iBAASJ;;;;;AAC1C,eAAO,AAACG,iBAASH;eAAKC;;;;;;;;;AAE9B,iCAAA,jCAAOI,0EACJL,IAAIM;AADP,AAEE,IAAMC,OAAK,AAACH,iBAASJ;AAArB,AACE,GAAI,kCAAAQ,jCAAU,AAACnQ,gBAAMkQ;AACnB,UAAK,CAAM,iBAAAE,WAAS,AAACpQ,gBAAMkQ;AAAhB,AAAA,sFAAAE,8BAAAA,5GAACH,wCAAAA,kDAAAA;QAAP;;AADP;;;AAGJ,2BAAA,3BAAOI,8DACJC;AADH,AAEE,oBAAA,WAAAC,3BAAMC;AAAN,AAAe,yDAAA,hDAAK,yBAAAD,zBAACE,kDAAY,GAAK,qBAAAF,rBAACG,8CAAS,GAAK,OAAAH;;IAC/CI,WAAS,WAAK1P;AAAL,AACE,IAAME,IAAE,AAACgO,+CAAOuB,qBAAK,AAACnG,eAAKtJ;AAA3B,AACE,GAAU,AAAChC,uBAAOkC;AAAlB;;AAAA,AAAqBA;;;IAClCyP,YAAU,WAAKpF,EAAErK;AAAP,AAAU,GAAU,AAAClC,uBAAOkC;AAAlB;;AAAA,AAAqB,OAACjB,cAAIiB;;;AAJpD,AAKE,OAAC0P,mBAAWL,cAAQG,SAASC,UAAUN;;AAE3C,iCAAA,kFAAA,0DAAA,8DAAA,oDAAA,yDAAA,gEAAA,2DAAA,mEAAA,0DAAA,+DAAA,/oBAAKQ;AAKL,AAAA;;;;0BAAA,kCAAA3U,5DAAM6U;AAAN,AAAA,IAAAD,WAAA,AAAA;AAAA,AAAA,QAAAA;KAAA;AAAA,OAAAC,sDAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,sDAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;;AAAA,MAAA,KAAA1U,MAAA,CAAA,8DAAA,AAAA;;;;;AAAA,CAAA,wDAAA,xDAAM0U,mEAGFV;AAHJ,AAGU,OAACW,sDAAUX,KAAKQ;;;AAH1B,CAAA,wDAAA,xDAAME,mEAIFV,KAAKL;AAJT,AAKG,IAAMR,SAAO,AAACY,yBAAWC;AAAzB,AACC,OAAChS,8CAAMqB,eAAK,+BAAA,WAAAuR,1CAAC1B,wBAAUC;AAAX,AAAmB,sCAAAyB,/BAAClB,gDAAaC;;;;AANjD,CAAA,kDAAA,lDAAMe;;AAAN,AAQA,AAAA;;;;kCAAA,0CAAA7U,5EAAMiV;AAAN,AAAA,IAAAD,WAAA,AAAA;AAAA,AAAA,QAAAA;KAAA;AAAA,OAAAC,8DAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,8DAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;;AAAA,MAAA,KAAA9U,MAAA,CAAA,8DAAA,AAAA;;;;;AAAA,CAAA,gEAAA,hEAAM8U,2EAGF9B;AAHJ,AAGa,OAAC+B,8DAAe/B,QAAQwB;;;AAHrC,CAAA,gEAAA,hEAAMM,2EAIF9B,QAAQW;AAJZ,0JAKOX,hEACA,0HAAA,4EAAA,tMAACC,7BACDP,7DACA,6DAAA,tDAACiC,sSAAUhB;;;AARlB,CAAA,0DAAA,1DAAMmB;;AAAN","names":["svg-clj.utils/*rounding*","svg-clj.utils/abs","js/Math.abs","svg-clj.utils/pow","js/Math.pow","var_args","G__37211","svg-clj.utils/round","js/Error","num","svg_clj.utils.round","places","d","Math/pow","Math/round","svg-clj.utils/v+","cljs.core.partial","cljs.core/mapv","cljs.core/+","svg-clj.utils/v-","cljs.core/-","svg-clj.utils/v*","cljs.core/*","svg-clj.utils/to-deg","rad","Math/PI","svg-clj.utils/to-rad","deg","args__4824__auto__","len__4818__auto__","i__4819__auto__","argseq__4825__auto__","cljs.core/IndexedSeq","svg-clj.utils/average","seq37214","self__4806__auto__","cljs.core/seq","numbers","n","cljs.core/count","cljs.core.apply","svg-clj.utils/v->s","v","clojure.string.join","svg-clj.utils/s->v","s","clojure.string/trim","clojure.string.split","p1__37215#","cljs.core.filter","cljs.core/complement","cljs.core/empty?","p1__37216#","cljs.core.mapv","cljs.reader/read-string","p__37217","vec__37218","cljs.core.nth","svg-clj.utils/xf-kv->str","k","cljs.core.symbol","cljs.core/list","svg-clj.utils/str->xf-kv","split","key","cljs.core.keyword","cljs.core/first","val","cljs.core/vec","cljs.reader.read_string","cljs.core/second","svg-clj.utils/xf-map->str","m","cljs.core.map","svg-clj.utils/str->xf-map","temp__5751__auto__","cljs.core.into","p1__37221#","clojure.string/replace","clojure.string/split-lines","svg-clj.utils/rotate-pt","pt","vec__37222","x","y","c","Math/cos","Math/sin","svg-clj.utils/rotate-pt-around-center","center","svg-clj.utils/distance","a","b","v2","cljs.core.reduce","Math/sqrt","svg-clj.utils/distance-squared","svg-clj.utils/determinant","p__37225","vec__37226","svg-clj.utils/perpendicular","svg-clj.utils/dot*","svg-clj.utils/cross*","vec__37229","vec__37232","a1","a2","a3","b1","b2","b3","i","j","p__37235","p__37236","vec__37237","vec__37240","svg-clj.utils/cross*-k","ax","ay","bx","by","svg-clj.utils/normalize","cljs.core//","cljs.core.repeat","G__37244","svg-clj.utils/normal","vec__37245","vec__37248","x1","y1","x2","y2","dx","dy","ab","ac","svg-clj.utils/check-quadrants","p1","p2","p3","v1","qf","p__37251","vec__37252","cljs.core/str","svg-clj.utils/angle-from-pts","vec__37255","vec__37258","v1nx","v1ny","v2nx","v2ny","l1","l2","same/zeroish?","Math/acos","quadrants","cljs.core._EQ_","fexpr__37261","fexpr__37262","fexpr__37263","fexpr__37264","fexpr__37265","fexpr__37266","fexpr__37267","fexpr__37268","Math/abs","fexpr__37269","p__37270","p__37271","vec__37272","vec__37275","svg-clj.utils/line-intersection","pt-a","pt-b","pt-c","pt-d","vec__37278","vec__37281","vec__37284","vec__37287","cx","cy","xdiff","ydiff","div","dets","svg-clj.utils/colinear?","ba","bc","eps","G__37290","svg-clj.utils/corner-condition","p__37291","vec__37292","svg-clj.utils/pt-inside?","ca","apt","bpt","cpt","p__37295","vec__37296","seq__37297","first__37298","cljs.core/next","svg-clj.utils/style","props","content","style-map","cljs.core.merge","svg-clj.utils/centroid-of-pts","pts","ndim","cljs.core.sort_by","splits","iter__4611__auto__","s__37302","cljs.core/LazySeq","temp__5753__auto__","cljs.core/chunked-seq?","c__4609__auto__","size__4610__auto__","b__37304","cljs.core/chunk-buffer","i__37303","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__37301","cljs.core/chunk-rest","cljs.core/cons","cljs.core/rest","axis","cljs.core.range","p1__37299#","p1__37300#","svg-clj.utils/bounds-of-pts","xmax","cljs.core/max","ymax","xmin","cljs.core/min","ymin","cljs.core/PersistentVector","svg-clj.utils/bb-dims","vec__37305","vec__37308","vec__37311","_","p__37314","vec__37315","svg-clj.utils/offset-edge","p","pd","xa","xb","svg-clj.utils/cycle-pairs","cljs.core.take","cljs.core.partition","cljs.core/cycle","svg-clj.utils/wrap-list-once","cljs.core.conj","cljs.core.drop_last","cljs.core/last","svg-clj.utils/every-other","p1__37318#","cljs.core.get","cljs.core/even?","svg-clj.utils/offset-pts","edges","opts","p1__37319#","cljs.core.mapcat","oedges","edge-pairs","p1__37320#","p__37321","p__37322","p__37323","vec__37324","vec__37327","vec__37330","svg-clj.utils/scale-pt-from-center","sx","sy","svg-clj.utils/ease-in-sin","t","svg-clj.utils/ease-out-sin","svg-clj.utils/ease-in-out-sin","svg-clj.utils/str->number","e37333","js/Object","e","svg-clj.utils/numerical-attrs","svg-clj.utils/cast-numerical-attrs","attrs","cljs.core/merge","p__37334","vec__37335","svg-clj.utils/fix-ns-tag","namespace","cljs.core/namespace","name","cljs.core/name","svg-clj.utils/xml->hiccup","xml","elem","cljs.core.remove","cljs.core/string?","svg-clj.utils/svg-str->hiccup","svg-str","clojure.data.xml.parse_str","svg-clj.utils/get-nodes","zipper","matcher","loc","acc","clojure.zip/end?","clojure.zip/next","clojure.zip/node","svg-clj.utils/elem-node?","key-set","node","cljs.core/Keyword","G__37338","svg-clj.utils/hiccup-zip","tree","p1__37339#","branch?","cljs.core/seqable?","cljs.core/map?","children","make-node","clojure.zip/zipper","svg-clj.utils/svg-element-keys","G__37342","svg-clj.utils/get-elems","svg_clj.utils.get_elems","p1__37340#","G__37344","svg-clj.utils/svg-str->elems","svg_clj.utils.svg_str__GT_elems","cljs.core/chunk-first"],"sourcesContent":["(ns svg-clj.utils\n  (:require [clojure.string :as str]\n            [clojure.data.xml :as xml]\n            [clojure.walk :refer [postwalk]]\n            [clojure.zip :as zip]\n            [same :refer [zeroish?]]\n            #?(:cljs\n               [cljs.reader :refer [read-string]])))\n\n(def ^:dynamic *rounding* nil)\n\n(def abs #?(:clj #(Math/abs %)  :cljs js/Math.abs))\n(def pow #?(:clj #(Math/pow %1 %2) :cljs js/Math.pow))\n\n(defn round\n  \"Rounds a non-integer number `num` to `places` decimal places.\"\n  ([num]\n   (round num *rounding*))\n  ([num places]\n   (if places\n     (let [d #?(:clj (bigdec (Math/pow 10 places))\n                :cljs (Math/pow 10 places))]\n       (double (/ (Math/round (* num d)) d)))\n     num)))\n\n;; vector arithmetic helpers\n(def v+ (partial mapv +))\n(def v- (partial mapv -))\n(def v* (partial mapv *))\n\n;; simple calcs\n(defn to-deg\n  [rad]\n  (round (* rad (/ 180 Math/PI))))\n\n(defn to-rad\n  [deg]\n  (round (* deg (/ Math/PI 180))))\n\n(defn average\n  [& numbers]\n  (let [n (count numbers)]\n    (round (/ (apply + numbers) n))))\n \n;; some string transformation tools\n(defn v->s\n  \"Turns the vector `v` into a string with commas separating the values.\"\n  [v]\n  (str/join \",\" v))\n\n(defn s->v\n  \"Turns a string of comma or space separated numbers into a vector.\"\n  [s]\n  (-> s\n      (str/trim)\n      (str/split #\"[, ]\")\n      (#(filter (complement empty?) %))\n      (#(mapv read-string %))))\n\n(defn xf-kv->str\n  [[k v]]\n  (str (symbol k) (apply list v)))\n\n(defn str->xf-kv\n  [s]\n  (let [split (str/split s #\"\\(\")\n        key (keyword (first split))\n        val (vec (read-string (str \"(\" (second split))))]\n    [key val]))\n\n(defn xf-map->str\n  \"Turn transform maps from an element's properties into a string properly formatted for use inline in an svg element tag.\n\n  Consider this an internal tool.\"\n  [m]\n  (str/join \"\\n\" (map xf-kv->str m)))\n\n(defn str->xf-map\n  [s]\n  (if-let [s s]\n    (into {} \n          (->> s\n               (#(str/replace % #\"\\)\" \")\\n\"))\n               str/split-lines\n               (map str/trim)\n               (map str->xf-kv)))\n    {}))\n\n(defn rotate-pt\n  \"Rotates 2d point `pt` around the origin by `deg` in the counter-clockwise direction.\"\n  [pt deg]\n  (let [[x y] pt\n        c (Math/cos (to-rad deg))\n        s (Math/sin (to-rad deg))]\n    [(round (- (* x c) (* y s)))\n     (round (+ (* x s) (* y c)))]))\n\n(defn rotate-pt-around-center\n  \"Rotates point `pt` around `center` by `deg` in the counter-clockwise direction.\"\n  [pt deg center]\n  (-> pt\n      (v+ (map - center))\n      (rotate-pt deg)\n      (v+ center)))\n\n(defn distance\n  \"Computes the distance between two points `a` and `b`.\"\n  [a b]\n  (let [v (v- b a)\n        v2 (reduce + (v* v v))]\n    (round (Math/sqrt v2))))\n\n(defn distance-squared\n  [a b]\n  (let [v (v- b a)]\n    (reduce + (v* v v))))\n\n(defn determinant\n  [a b]\n  (- (* (first a) (second b))\n     (* (second a) (first b))))\n\n;; this fn name doesn't make sense? It inverts y, which is not\n;; the same as giving a perpendicular line\n;; maybe call it 'invert-y' or 'vertical-flip'\n(defn perpendicular\n  [[x y]]\n  [(- y) x])\n\n(defn dot*\n  \"Calculates the dot product of two vectors.\"\n  [a b]\n  (reduce + (map * a b)))\n\n(defn cross*\n  \"Calculates cross product of two 3d-vectors. If `a` and `b` are 2D, z is assumed to be 0.\"\n  [a b]\n  (let [[a1 a2 a3] a\n        [b1 b2 b3] b\n        a3 (if a3 a3 0)\n        b3 (if b3 b3 0)\n        i (- (* a2 b3) (* a3 b2))\n        j (- (* a3 b1) (* a1 b3))\n        k (- (* a1 b2) (* a2 b1))]\n    [i j k]))\n\n(defn cross*-k\n  \"Calculates the k component of the cross product of two 2D vectors, assuming Z=0 as the 3rd component.\"\n  [[ax ay] [bx by]]\n  (- (* ax by) (* ay bx)))\n\n(defn normalize\n  \"Calculates the unit vector of a given vector.\"\n  [v]\n  (let [m (Math/sqrt (reduce + (v* v v)))]\n    (mapv / v (repeat m))))\n\n(defn normal\n  \"Calculates the normal vector of plane given 3 points or calculates the normal vector of a line given two (2D) points.\"\n  ([a b]\n   (let [[x1 y1] a\n         [x2 y2] b\n         dx (- x2 x1)\n         dy (- y2 y1)]\n     [(- dy) dx]))\n  ([a b c]\n   (let [ab (v- a b)\n         ac (v- a c)]\n     (cross* ab ac))))\n\n;; https://math.stackexchange.com/questions/361412/finding-the-angle-between-three-points\n(defn- check-quadrants\n  \"Using `p2` as the 'origin', return a string indicating positive, negative, or axis-aligned for p1 p2.\"\n  [p1 p2 p3]\n  (let [v1 (v- p1 p2)\n        v2 (v- p3 p2)\n        qf (fn [[x y]]\n             (cond (and (pos? x) (pos? y)) \"pp\"\n                   (and (pos? x) (neg? y)) \"pn\"\n                   (and (neg? x) (neg? y)) \"nn\"\n                   (and (neg? x) (pos? y)) \"np\"\n                   (pos? x) \"p_\"\n                   (neg? x) \"n_\"\n                   (pos? y) \"_p\"\n                   (neg? y) \"_n\"))]\n    (apply str (map qf [v1 v2]))))\n\n(defn angle-from-pts\n  \"Calculates the angle starting at line p3p2 going to line p1p2.\nPut another way, the angle is measured following the 'right hand rule' around p2.\"\n  [p1 p2 p3]\n  (let [v1 (v- p1 p2)\n        v2 (v- p3 p2)\n        [v1nx v1ny] (normalize v1)\n        [v2nx v2ny] (normalize v2)\n        l1 (distance p1 p2)\n        l2 (distance p3 p2)\n        n (dot* v1 v2)\n        d (* l1 l2)]\n    (when-not (zeroish? (float d))\n      (let [a (to-deg (Math/acos (/ n d)))\n            quadrants (check-quadrants p1 p2 p3)]\n        (cond\n          ;; same quadrant, checking if V2 is before or after V1\n          (and (= \"pppp\" quadrants) (> v2nx v1nx)) a\n          (and (= \"npnp\" quadrants) (> v2nx v1nx)) a\n          (and (= \"nnnn\" quadrants) (< v2nx v1nx)) a\n          (and (= \"pnpn\" quadrants) (< v2nx v1nx)) a\n          ;; within same quadrant\n          (#{\"p_p_\" \"ppp_\" \"_ppp\" \"p_pn\"} quadrants) a \n          (#{\"_p_p\" \"np_p\" \"n_np\"} quadrants) a\n          (#{\"n_n_\" \"nnn_\" \"_nnn\"} quadrants) a\n          (#{\"_n_n\" \"pn_n\" \"pnp_\"} quadrants) a\n          ;; one quadrant away\n          (#{\"npp_\" \"nn_p\" \"pnn_\" \"pp_n\"} quadrants) a\n          (#{\"n_pp\" \"_nnp\" \"p_nn\" \"_ppn\"} quadrants) a\n          (#{\"nppp\" \"nnnp\" \"pnnn\" \"pppn\"} quadrants) a\n          ;; 90 degrees away on axes\n          (#{\"_pp_\" \"n__p\" \"_nn_\" \"p__n\"} quadrants) a\n          ;; two quadrants away\n          (and (= \"ppnn\" quadrants) (> (Math/abs v1nx) (Math/abs v2nx))) a\n          (and (= \"nnpp\" quadrants) (> (Math/abs v1nx) (Math/abs v2nx))) a\n          (and (= \"pnnp\" quadrants) (< (Math/abs v1nx) (Math/abs v2nx))) a\n          (and (= \"nppn\" quadrants) (< (Math/abs v1nx) (Math/abs v2nx))) a\n          ;; 180 degrees away on axes\n          (#{\"p_n_\" \"_p_n\" \"n_p_\" \"_n_p\"} quadrants) a\n          :else (- 360 a))))))\n\n(defn line-intersection\n  [[pt-a pt-b] [pt-c pt-d]]\n  (let [[ax ay] pt-a\n        [bx by] pt-b\n        [cx cy] pt-c\n        [dx dy] pt-d\n        xdiff [(- ax bx) (- cx dx)]\n        ydiff [(- ay by) (- cy dy)]\n        div (determinant xdiff ydiff)]\n    (when-not (zeroish? (abs div))\n      (let [dets [(determinant pt-a pt-b) (determinant pt-c pt-d)]\n            x (/ (determinant dets xdiff) div)\n            y (/ (determinant dets ydiff) div)]\n        [x y]))))\n\n(defn colinear?\n  [a b c]\n  (let [ba (v- a b)\n        bc (v- c b)\n        eps 0.000001]\n    (> eps (abs (cross*-k ba bc)))))\n\n(defn corner-condition\n  [a b c]\n  (let [ba (v- a b)\n        bc (v- c b)\n        eps 0.000001\n        k (cross*-k ba bc)]\n    (cond\n      (> eps (abs k)) :colinear\n      (< eps k) :reflex\n      (> (- eps) k) :convex)))\n\n;; https://youtu.be/hTJFcHutls8?t=1473\n;; use k component from cross product to quickly check if vector\n;; is on right or left of another vector\n;; check each triangle edge vector against corner to pt vectors\n(defn pt-inside?\n  [[a b c] pt]\n  (let [ab (v- b a)\n        bc (v- c b)\n        ca (v- a c)\n        apt (v- pt a)\n        bpt (v- pt b)\n        cpt (v- pt c)]\n    (not\n     (or (<= (cross*-k ab apt) 0)\n         (<= (cross*-k bc bpt) 0)\n         (<= (cross*-k ca cpt) 0)))))\n\n(defn style\n  [[k props & content] style-map]\n  (into [k (merge props style-map)] content))\n\n(defn centroid-of-pts\n  \"Calculates the arithmetic mean position of the given `pts`.\"\n  [pts]\n  (let [ndim (count (first (sort-by count pts)))\n        splits (for [axis (range 0 ndim)]\n                 (map #(nth % axis) pts))]\n    (mapv #(apply average %) splits)))\n\n(defn bounds-of-pts\n  \"Calculates the axis-aligned-bounding-box of `pts`.\"\n  [pts]\n  (let [xmax (apply max (map first pts))\n        ymax (apply max (map second pts))\n        xmin (apply min (map first pts))\n        ymin (apply min (map second pts))]\n    (vector [xmin ymin]\n            [xmax ymin]\n            [xmax ymax]\n            [xmin ymax])))\n\n(defn bb-dims\n  [pts]\n  (let [[[xmin ymin] _ [xmax ymax] _] (bounds-of-pts pts)]\n    [(- xmax xmin) (- ymax ymin)]))\n\n(defn offset-edge\n  [[a b] d]\n  (let [p (perpendicular (v- b a))\n        pd (v* (normalize p) (repeat (- d)))\n        xa (v+ a pd)\n        xb (v+ b pd)]\n    [xa xb]))\n\n(defn- cycle-pairs\n  [pts]\n  (let [n (count pts)]\n    (vec (take n (partition 2 1 (cycle pts))))))\n\n(defn- wrap-list-once\n  [s]\n  (conj (drop-last s) (last s)))\n\n(defn- every-other\n  [v]\n  (let [n (count v)]\n    (map #(get v %) (filter even? (range n)))))\n\n(defn offset-pts\n  [pts d]\n  (let [edges (cycle-pairs pts)\n        opts (mapcat #(offset-edge % d) edges)\n        oedges (every-other (cycle-pairs opts))\n        edge-pairs (cycle-pairs oedges)]\n    (wrap-list-once (map #(apply line-intersection %) edge-pairs))))\n\n(defn scale-pt-from-center\n  [[x y] [sx sy] [cx cy]]\n  [(+ (* (- x cx) sx) cx)\n   (+ (* (- y cy) sy) cy)])\n\n(defn ease-in-sin\n  [t]\n  (- 1 (Math/cos (/ (* Math/PI t) 2))))\n\n(defn ease-out-sin\n  [t]\n  (Math/sin (/ (* Math/PI t) 2)))\n\n(defn ease-in-out-sin\n  [t]\n  (/ (- (Math/cos (* Math/PI t)) 1) -2))\n\n(defn str->number\n  [s]\n  (let [n (try (read-string s)\n               (catch #?(:clj Exception\n                         :cljs js/Object) e s))]\n    (if (number? n) n s)))\n\n(def numerical-attrs\n  #{;; circle, ellipse\n    :cx :cy :r :rx :ry\n    ;; image, rect\n    :width :height :x :y\n    ;; line\n    :x1 :y1 :x2 :y2})\n\n(defn cast-numerical-attrs\n  \"Casts certain attribute values to numbers if they are strings.\nAttributes to be cast are defined in `numerical-attrs` and include `:cx`, `:cy`, `:width`, etc.\"\n  [attrs]\n  (if (empty? attrs)\n    {}\n    (apply merge\n           (map\n            (fn [[k v]]\n              (if (numerical-attrs k)\n                {k (str->number v)}\n                {k v}))\n            attrs))))\n\n(defn- fix-ns-tag\n  [t]\n  (let [namespace (namespace t)\n        name (name t)]\n    (if namespace\n      (-> namespace\n          (str/split #\"\\.\")\n          first\n          (str \":\" name)\n          keyword)\n      t)))\n\n(defn xml->hiccup\n  [xml]\n  (if-let [t (:tag xml)]\n    (let [elem [(fix-ns-tag t)]\n          elem (conj elem (cast-numerical-attrs (:attrs xml)))]\n      (into elem (map xml->hiccup (remove string? (:content xml)))))\n    xml))\n\n(defn svg-str->hiccup\n  \"Parses an SVG string into a Hiccup data structure, keeping all nodes.\"\n  [svg-str]\n  (-> svg-str\n      (xml/parse-str :namespace-aware false)\n      xml->hiccup))\n\n(defn- get-nodes\n  \"Returns a list of nodes from `zipper` that return `true` from the `matcher` predicate fn.\n  The `matcher` fn expects a zipper location, `loc`, and returns `true` (or some value) or `false` (or nil).\"\n  [zipper matcher]\n  (loop [loc zipper\n         acc []]\n    (if (zip/end? loc)\n      acc\n      (if (matcher loc)\n        (recur (zip/next loc) (conj acc (zip/node loc)))\n        (recur (zip/next loc) acc)))))\n\n(defn- elem-node?\n  [loc key-set]\n  (let [node (zip/node loc)]\n    (if (keyword? (first node))\n      (not (nil? (key-set (first node)))))))\n\n(defn- hiccup-zip\n  [tree]\n  (let [branch? #(and (seqable? %) (not (map? %)) (not (string? %)))\n        children (fn [x]\n                   (let [c (remove map? (rest x))]\n                     (when-not (empty? c) c)))\n        make-node (fn [_ c] (when-not (empty? c) (vec c)))]\n    (zip/zipper branch? children make-node tree)))\n\n(def svg-element-keys #{:circle :ellipse\n                        :line :rect\n                        :polygon :polyline :path\n                        :image :text :g})\n\n(defn get-elems\n  \"Get SVG elements from `tree`, a Hiccup data structure.\nOptionally, pass in a set of keys  as `key-set` to use when matching nodes from the tree.\"\n  ([tree] (get-elems tree svg-element-keys))\n  ([tree key-set]\n   (let [zipper (hiccup-zip tree)]\n    (apply list (get-nodes zipper #(elem-node? % key-set))))))\n\n(defn svg-str->elems\n  \"Parses an SVG string into a sequence of SVG elements compatible with this library.\nElements are \"\n  ([svg-str] (svg-str->elems svg-str svg-element-keys))\n  ([svg-str key-set]\n   (-> svg-str\n       (xml/parse-str :namespace-aware false)\n       xml->hiccup\n       (get-elems key-set))))\n"]}