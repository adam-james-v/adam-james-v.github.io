{"version":3,"sources":["same.cljc"],"mappings":"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","names":["var_args","args__4824__auto__","len__4818__auto__","i__4819__auto__","argseq__4825__auto__","cljs.core/IndexedSeq","same/ish?","js/Error","seq36985","G__36986","cljs.core/first","cljs.core/next","self__4805__auto__","expected","actuals","cljs.core/not-empty","cljs.core/every?","cljs.core.partial","same.ish/ish","same/zeroish?","p__37009","map__37010","cljs.core/--destructure-map","cljs.core.get","seq36995","G__36996","val","scale","same.compare/near-zero","same/not-zeroish?","p__37016","map__37020","seq37014","G__37015","same/set-comparator!","comparator","same.ish/*comparator*"],"sourcesContent":[";; Copyright (c) Microsoft Corporation. All rights reserved.\n;; Licensed under the MIT License.\n(ns same\n  \"Main public API namespace.\"\n  (:require #?(:clj [clojure.test :refer [assert-expr do-report]])\n            [same.compare :refer [near-zero]]\n            [same.diff :refer [diff]]\n            [same.ish :as ish :refer [ish]]))\n\n(defn ish?\n  \"Compare one or more values to an expected value, returning true if they are the same-ish.\n  The values can be numbers:\n  ```klipse\n  (let [two (Math/pow (Math/sqrt 2) 2)]\n    [(== 2 two) (ish? 2 two)])\n  ```\n  or data structures:\n  ```klipse\n  (ish? {:a 1 :b [1.99999999999999 3]}\n        {:a 1.00000000000001 :b [2 3.0]})\n  ```\n  you can also compare more than one value to the expected value:\n  ```klipse\n  (ish? 1 1.0 0.99999999999999 1.00000000000001 1)\n  ```\"\n  [expected & actuals]\n  {:pre [(not-empty actuals)]}\n  (every? (partial ish expected) actuals))\n\n(defn zeroish?\n  \"Compare a numeric value to zero, returning true if close.\n  ```klipse\n  (zeroish? 0.0000000001\n            :scale 1e6)\n  ```\"\n  [val & {:keys [scale] :or {scale 1000.0}}]\n  (near-zero val scale))\n\n(defn not-zeroish?\n  \"Compare a numeric value to zero, returning true if not close. Equivalent to `(not (zeroish? ...))`.\n  ```klipse\n  (not-zeroish? 3 :scale 1e6)\n  ```\"\n  [val & {:keys [scale] :or {scale 1000.0}}]\n  (not (near-zero val scale)))\n\n(defn set-comparator!\n  \"Set the default comparator.\n  ```klipse\n  (set-comparator! (compare-ulp 2.0 100))\n  (ish? 0.1 (-> 2 Math/sqrt (Math/pow 2) (- 1.9)))\n  ```\"\n  [comparator]\n  #?(:clj (alter-var-root #'ish/*comparator* (constantly comparator))\n     :cljs (set! ish/*comparator* comparator))\n  nil)\n\n(defmacro with-comparator\n  \"Temporarily replace the default comparator.\n  ```klipse\n  (with-comparator (compare-ulp 100.0 1e9)\n    (ish? 1.0 0.9999999))\n  ```\n  ```klipse\n  (with-comparator ==\n    (ish? 1.0 0.9999999999999))\n  ```\"\n  [comparator & body]\n  `(binding [ish/*comparator* ~comparator]\n     ~@body))\n\n#?(:clj\n   (defmethod assert-expr 'ish? [msg [_ expected & actuals]]\n     `(let [expected# ~expected\n            actuals# ~(vec actuals)\n            result# (apply ish? expected# actuals#)]\n        (if result#\n          (do-report {:type :pass :message ~msg\n                      :expected expected# :actual (if (= 1 (count actuals#))\n                                                    (first actuals#)\n                                                    actuals#)})\n          (do-report {:type :fail :message ~msg\n                      :expected expected# :actual (if (= 1 (count actuals#))\n                                                    (first actuals#)\n                                                    actuals#)\n                      :diffs (mapv #(vector % (diff expected# %))\n                                   actuals#)}))\n        result#)))\n"]}