{"version":3,"sources":["same/diff.cljc"],"mappings":"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","names":["same.diff/un-array","a","same.platform/is-array?","cljs.core/vec","var_args","args__4824__auto__","len__4818__auto__","i__4819__auto__","argseq__4825__auto__","cljs.core/IndexedSeq","same.diff/result-vec","seq36900","G__36901","cljs.core/first","cljs.core/next","G__36902","self__4805__auto__","n","res","next","cljs.core/empty?","or__4212__auto__","cljs.core.into","cljs.core.take","cljs.core/count","cljs.core.repeat","same$diff$Diff$diff$dyn","x__4509__auto__","m__4510__auto__","same.diff/diff","goog/typeOf","m__4508__auto__","cljs.core/missing-protocol","same.diff/Diff","this","that","same.diff/diff-seq","l","r","c","left","right","cljs.core.apply","vec__36912","seq__36913","cljs.core/seq","first__36914","vec__36915","seq__36916","first__36917","l0","lm","r0","rm","same.ish/ish","same.diff.result_vec","vec__36918","cljs.core.nth","dl","dr","dc","same.diff/update-common-keys","acc","lmap","rmap","keys","cljs.core.reduce","m","k","vec__36921","cljs.core.get","G__36924","cljs.core/assoc-in","same.diff/update-float-keys","lkeys","rkeys","lk","rk","p1__36925#","p2__36926#","p1__36927#","p2__36928#","vec__36929","seq__36930","first__36931","vec__36932","seq__36933","first__36934","lk0","lkr","rk0","rkr","lv","rv","vec__36935","G__36938","goog.object/set","cljs.core/sequential?","cljs.core/map?","vec__36955","vec__36958","this-floats","this-rest","same.ish/split-floats","cljs.core/keys","that-floats","that-rest","extract","cljs.core.juxt","cljs.core/select-keys","clojure.set.difference","clojure.set.intersection","cljs.core.sort","cljs.core.mapv","cljs.core/not-empty","cljs.core/set?","vec__36963","vec__36966","vec__36975","seq__36976","first__36977","vec__36978","seq__36979","first__36980","vl","rl","vr","rr","cljs.core.conj"],"sourcesContent":[";; Copyright (c) Microsoft Corporation. All rights reserved.\n;; Licensed under the MIT License.\n(ns same.diff\n  \"Generating diffs of different types.\"\n  (:require [clojure.set :as set]\n            [same.ish :refer [ish split-floats]]\n            [same.platform :as p]))\n\n(defn- un-array\n  \"If `a` is an array, convert to a vector so it prints nicely.\"\n  [a]\n  (if (p/is-array? a)\n    (vec a)\n    a))\n\n(defn- result-vec\n  [n res & next]\n  (if (empty? next)\n    res\n    (-> (or res [])\n        (into (take (- ^long n (count res)) (repeat nil)))\n        (into next))))\n\n(defprotocol Diff\n  \"Protocol for generating diffs of any type.\"\n  (diff [this that]\n    \"Returns the diff of two values, in the same format as `clojure.data/diff`,\n    i.e. a vector of 3 elements: `[parts-only-in-this parts-only-in-that parts-in-both]`\"))\n\n(defn- diff-seq\n  \"Diff of sequential types, by comparing element-wise.\"\n  [this that]\n  (loop [l nil\n         r nil\n         c nil\n         n 0\n         left this\n         right that]\n    (if (or (empty? left) (empty? right))\n      [(apply result-vec n l left) (apply result-vec n r right) c]\n      (let [[l0 & lm] left\n            [r0 & rm] right]\n        (if (ish l0 r0)\n          (recur l r (result-vec n c r0) (inc n) lm rm)\n          (let [[dl dr dc] (diff l0 r0)]\n            (recur (result-vec n l dl)\n                   (result-vec n r dr)\n                   (if (nil? dc) c (result-vec n c dc))\n                   (inc n) lm rm)))))))\n\n(defn- update-common-keys\n  [acc lmap rmap keys]\n  (reduce (fn [m k]\n            (let [[dl dr dc] (diff (get lmap k) (get rmap k))]\n              (cond-> m\n                (or (some? dl) (some? dr)) (assoc-in [:l k] dl)\n                (or (some? dl) (some? dr)) (assoc-in [:r k] dr)\n                (some? dc)                 (assoc-in [:c k] dc))))\n          acc\n          keys))\n\n(defn- update-float-keys\n  [acc lmap rmap lkeys rkeys]\n  (loop [a acc\n         lk lkeys\n         rk rkeys]\n    (cond\n      (and (empty? lk) (empty? rk))\n      a\n\n      (empty? lk)\n      (reduce #(assoc-in %1 [:r %2] (get rmap %2))\n              a\n              rk)\n\n      (empty? rk)\n      (reduce #(assoc-in %1 [:l %2] (get lmap %2))\n              a\n              lk)\n\n      :else\n      (let [[lk0 & lkr] lk\n            [rk0 & rkr] rk\n            lv (get lmap lk0)\n            rv (get rmap rk0)]\n        (cond\n          (ish lk0 rk0)\n          (let [[dl dr dc] (diff lv rv)\n                acc (cond-> a\n                      (or (some? dl) (some? dr)) (assoc-in [:l lk0] dl)\n                      (or (some? dl) (some? dr)) (assoc-in [:r rk0] dr)\n                      (some? dc)                 (assoc-in [:c rk0] dc))]\n            (recur acc lkr rkr))\n\n          (< ^double lk0 ^double rk0)\n          (recur (assoc-in a [:l lk0] lv) lkr rk)\n\n          :else\n          (recur (assoc-in a [:r rk0] rv) lk rkr))))))\n\n#?(:clj\n   (extend-protocol Diff\n     nil\n     (diff [this that]\n       [this that nil])\n\n     clojure.lang.Sequential\n     (diff [this that]\n       (cond\n         (ish this that)    [nil nil that]\n         (sequential? that) (diff-seq this that)\n         :else              [this that nil]))\n\n     java.util.Set\n     (diff [this that]\n       (cond\n         (ish this that)\n         [nil nil that]\n\n         (instance? java.util.Set that)\n         (let [[this-floats this-rest] (split-floats this)\n               [that-floats that-rest] (split-floats that)]\n           (loop [l (set/difference this-rest that-rest)\n                  r (set/difference that-rest this-rest)\n                  c (set/intersection this-rest that-rest)\n                  left  (sort this-floats)\n                  right (sort that-floats)]\n             (if (or (empty? left) (empty? right))\n               (mapv not-empty [(into l left) (into r right) c])\n               (let [[vl & rl] left\n                     [vr & rr] right]\n                 (cond\n                   (ish vl vr)\n                   (recur l r (conj c vr) rl rr)\n\n                   (< ^double vl ^double vr)\n                   (recur (conj l vl) r c rl right)\n\n                   :else\n                   (recur l (conj r vr) c left rr))))))\n\n         :else\n         [this that nil]))\n\n     java.util.Map\n     (diff [this that]\n       (cond\n         (ish this that)\n         [nil nil that]\n\n         (instance? java.util.Map that)\n         (let [[this-floats this-rest] (split-floats (keys this))\n               [that-floats that-rest] (split-floats (keys that))\n               extract (juxt :l :r :c)]\n           (-> {:l (select-keys this (set/difference this-rest that-rest))\n                :r (select-keys that (set/difference that-rest this-rest))\n                :c {}}\n               (update-common-keys this that (set/intersection this-rest that-rest))\n               (update-float-keys this that (sort this-floats) (sort that-floats))\n               extract\n               (->> (mapv not-empty))))\n\n         :else\n         [this that nil]))\n\n     Object\n     (diff [this that]\n       (if (ish this that)\n         [nil nil (un-array that)]\n         (if (p/is-array? that)\n           (diff-seq this that)\n           [(un-array this) (un-array that) nil]))))\n\n   :cljs\n   (extend-protocol Diff\n     nil\n     (diff [this that]\n       [nil that nil])\n\n     number\n     (diff [this that]\n       (if (ish this that)\n         [nil nil that]\n         [this that nil]))\n\n     boolean\n     (diff [this that]\n       (if (ish this that)\n         [nil nil that]\n         [this that nil]))\n\n     string\n     (diff [this that]\n       (if (ish this that)\n         [nil nil that]\n         [this that nil]))\n\n     array\n     (diff [this that]\n       (if (p/is-array? that)\n         (diff-seq this that)\n         [(un-array this) that nil]))\n\n     object\n     (diff [this that]\n       (cond\n         (ish this that)\n         [nil nil (un-array that)]\n\n         (and (sequential? this) (sequential? that))\n         (diff-seq this that)\n\n         (and (map? this) (map? that))\n         (let [[this-floats this-rest] (split-floats (keys this))\n               [that-floats that-rest] (split-floats (keys that))\n               extract (juxt :l :r :c)]\n           (-> {:l (select-keys this (set/difference this-rest that-rest))\n                :r (select-keys that (set/difference that-rest this-rest))\n                :c {}}\n               (update-common-keys this that (set/intersection this-rest that-rest))\n               (update-float-keys this that (sort this-floats) (sort that-floats))\n               extract\n               (->> (mapv not-empty))))\n\n         (and (set? this) (set? that))\n         (let [[this-floats this-rest] (split-floats this)\n               [that-floats that-rest] (split-floats that)]\n           (loop [l (set/difference this-rest that-rest)\n                  r (set/difference that-rest this-rest)\n                  c (set/intersection this-rest that-rest)\n                  left  (sort this-floats)\n                  right (sort that-floats)]\n             (if (or (empty? left) (empty? right))\n               (mapv not-empty [(into l left) (into r right) c])\n               (let [[vl & rl] left\n                     [vr & rr] right]\n                 (cond\n                   (ish vl vr)\n                   (recur l r (conj c vr) rl rr)\n\n                   (< ^double vl ^double vr)\n                   (recur (conj l vl) r c rl right)\n\n                   :else\n                   (recur l (conj r vr) c left rr))))))\n\n         :else\n         [this (un-array that) nil]))))\n"]}