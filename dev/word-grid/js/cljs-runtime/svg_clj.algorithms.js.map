{"version":3,"sources":["svg_clj/algorithms.cljc"],"mappings":"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","names":["svg-clj.algorithms/abs","js/Math.abs","svg-clj.algorithms/pow","js/Math.pow","p__37352","vec__37359","vec__37362","cljs.core.nth","vec__37365","vec__37368","svg-clj.algorithms/circumscribe-tri","ax","ay","bx","by","cx","cy","A","B","C","D","E","F","G","dx","dy","r","svg-clj.algorithms/edges","pts","cljs.core.partition","cljs.core.conj","cljs.core/vec","cljs.core/first","p__37372","p__37373","map__37374","cljs.core/--destructure-map","cljs.core.get","vec__37375","svg-clj.algorithms/contains-pt?","x","y","radius-squared","px","py","distance-squared","G__37378","G__37379","G__37380","G__37381","svg-clj.algorithms/outer-edges","tris","all-edges","cljs.core.mapcat","matches","edge","cljs.core.filter","cljs.core/reverse","appears-once","cljs.core._EQ_","cljs.core/count","svg-clj.algorithms/make-new-tris","containers","pt","cljs.core.map","p__37383","vec__37384","p1","p2","cljs.core/set","svg-clj.algorithms/add-pt-to-tris","p1__37387#","new-tris","clojure.set.union","clojure.set.difference","svg-clj.algorithms/delaunay","vec__37391","p__37394","vec__37395","pt-indices","cljs.core/zipmap","cljs.core.range","bl","br","tr","tl","p1__37388#","svg-clj.utils/v*","svg-clj.utils/bounds-of-pts","initial","with-bounds","cljs.core.reduce","p1__37389#","cljs.core.remove","cljs.core/some","tri-indices","tri","p1__37390#","cljs.core.mapv","cljs.core.distinct","svg-clj.algorithms/remove-colinears","indices","cljs.core.concat","cljs.core.take","clpts","cljs.core/second","p1__37401#","cljs.core.apply","svg-clj.utils/colinear?","xindices","cljs.core/vals","cljs.core/dissoc","p1__37402#","svg-clj.algorithms/clip-one-ear","corners","p1__37404#","p1__37405#","G__37409","fexpr__37408","svg-clj.utils/corner-condition","clear?","corner","cljs.core/not","cljs.core/seq","p1__37406#","svg-clj.utils/pt-inside?","p1__37407#","cljs.core.sort","cljs.core.dissoc","var_args","G__37412","svg-clj.algorithms/clip-ears","js/Error","svg_clj.algorithms.clip_ears","data","cljs.core.merge","map__37413","npts","local-indices","p1__37410#","G__37417","svg-clj.algorithms/hull","svg_clj.algorithms.hull","cljs.core.sort_by","acc","cljs.core/last","cljs.core.drop_last","prev","dir","svg-clj.utils/v+","f","a","cljs.core.into","svg-clj.utils/angle-from-pts","sorted","p1__37414#","p1__37415#","G__37424","svg-clj.utils/abs","G__37426","svg-clj.algorithms/nested-hull","svg_clj.algorithms.nested_hull","hull"],"sourcesContent":["(ns svg-clj.algorithms\n  (:require [svg-clj.utils :as utils]\n            [clojure.set :as set]))\n\n(def abs #?(:clj #(Math/abs %) :cljs js/Math.abs))\n(def pow #?(:clj #(Math/pow %1 %2) :cljs js/Math.pow))\n\n;; https://gist.github.com/mutoo/5617691\n(defn circumscribe-tri\n  [[[ax ay] [bx by] [cx cy]]]\n  (let [A (- bx ax)\n        B (- by ay)\n        C (- cx ax)\n        D (- cy ay)\n        E (+ (* A (+ ax bx)) (* B (+ ay by)))\n        F (+ (* C (+ ax cx)) (* D (+ ay cy)))\n        G (* 2 (- (* A (- cy by)) (* B (- cx bx))))]\n    (when (> (abs G) 0.000001)\n      (let [cx (/ (- (* D E) (* B F)) G)\n            cy (/ (- (* A F) (* C E)) G)\n            dx (- cx ax)\n            dy (- cy ay)\n            r  (+ (pow dx 2) (pow dy 2))]\n        {:x cx :y cy :radius-squared r}))))\n\n(defn edges\n  [pts]\n  (partition 2 1 (conj (vec pts) (first pts))))\n\n(defn contains-pt?\n  [{:keys [x y radius-squared]} [px py]]\n  (let [distance-squared (+ (pow (- x px) 2) (pow (- y py) 2))]\n    (< distance-squared radius-squared)))\n\n(defn outer-edges\n  [tris]\n  (let [all-edges (mapcat edges tris)\n        matches (fn [edge] (filter #{edge (reverse edge)} all-edges))\n        appears-once (fn [edge] (= (count (matches edge)) 1))]\n    (filter appears-once all-edges)))\n\n(defn make-new-tris\n  [containers pt]\n  (->> containers\n       outer-edges\n       (map (fn [[p1 p2]] [p1 p2 pt]))\n       set))\n\n(defn add-pt-to-tris\n  [tris pt]\n  (let [containers (filter #(contains-pt? (circumscribe-tri %) pt) tris)\n        new-tris (make-new-tris containers pt)]\n    (set/union (set/difference tris containers) new-tris)))\n\n;; http://paulbourke.net/papers/triangulate/\n(defn delaunay\n  [pts]\n  (let [pts (map (fn [[x y]] [(float x) (float y)]) pts)\n        pt-indices (zipmap pts (range 0 (count pts)))\n        [bl br tr tl] (map #(utils/v* % [2 2]) (utils/bounds-of-pts pts))\n        initial #{[tl tr bl] [bl tr br]}\n        with-bounds (reduce add-pt-to-tris initial pts)\n        tris (remove #(some #{tl tr bl br} %) with-bounds)\n        tri-indices (fn [tri] (mapv #(get pt-indices %) tri))]\n    {:pts pts\n     :tris tris\n     :tri-indices (map tri-indices tris)\n     :edges (distinct (mapcat edges tris))}))\n\n(defn remove-colinears\n  [pts]\n  (let [indices (zipmap pts (range (count pts)))\n        tris (partition 3 1 (concat pts (take 2 pts)))\n        clpts (set (map second (filter #(apply utils/colinear? %) tris)))\n        xindices (vals (apply dissoc indices clpts))]\n    (map #(get pts %) xindices)))\n\n(defn- clip-one-ear\n  [pts]\n  (let [pts (vec pts)\n        indices (zipmap pts (range (count pts)))\n        corners (->> pts\n                     (#(concat % (take 2 %)))\n                     (partition 3 1)\n                     (filter #(#{:convex} (apply utils/corner-condition %))))\n        clear? (fn [corner]\n                 (not (seq (filter #(utils/pt-inside? corner %) pts))))\n        tri (first (filter clear? corners))]\n    {:pts pts\n     :npts (mapv #(get pts %) (sort (vals (dissoc indices (second tri)))))\n     :tri tri}))\n\n(defn clip-ears\n  ([pts] (clip-ears {:indices (zipmap pts (range (count pts)))} pts [] []))\n  ([data pts tris indices]\n   (if (< (count pts) 3)\n     (merge data {:tris tris :tri-indices indices})\n     (let [{:keys [npts tri]} (clip-one-ear pts)\n           local-indices (mapv #(get (:indices data) %) tri)]\n       (recur data npts (conj tris tri) (conj indices local-indices))))))\n\n(defn hull\n  ([pts] (hull [{:pt (first (sort-by first pts))}] pts))\n  ([acc pts]\n   (if (or\n        ;; stop the process if acc grows larger than the pts count\n        (> (count acc) (count pts))\n        ;; *should* always end where the last added point closes the poly\n        (and (< 1 (count acc))\n             (= (:pt (first acc)) (:pt (last acc)))))\n     (map :pt (drop-last acc))\n     (let [prev (:pt (last acc))\n           dir (if (= 1 (count acc))\n                 (utils/v+ [0 1] prev)\n                 (:pt (last (drop-last acc))))\n           f (fn [pt]\n               (let [a (when (= 3 (count (into #{} [dir prev pt])))\n                         (utils/angle-from-pts dir prev pt))]\n                 {:pt pt :angle a}))\n           sorted (->> (map f pts)\n                       (remove #(nil? (:angle %)))\n                       (sort-by #(utils/abs (- (:angle %) 180))))]\n       (recur (conj acc (first sorted)) pts)))))\n\n(defn nested-hull\n  ([pts] (nested-hull [] pts))\n  ([acc pts]\n   (if (> 3 (count pts))\n     acc\n     (let [hull (hull pts)\n           npts (remove (set hull) pts)]\n       (recur (conj acc hull) npts)))))\n"]}