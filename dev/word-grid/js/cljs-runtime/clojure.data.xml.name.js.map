{"version":3,"sources":["clojure/data/xml/name.cljc"],"mappings":"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","names":["clojure.data.xml.name/parse-qname","cljs.core/alter-meta!","cljs.core/constantly","cljs.core.assoc","cljs.core/meta","clojure.data.xml.js.name/parse-qname","clojure.data.xml.name/encode-uri","clojure.data.xml.js.name/encode-uri","clojure.data.xml.name/decode-uri","clojure.data.xml.js.name/decode-uri","clojure.data.xml.name/uri-symbol","uri","cljs.core.symbol","G__36668","clojure.data.xml.name/symbol-uri","ss","du","G__36669","cljs.core.subs","cljs.core.ex_info","clojure.data.xml.name/qname-uri","v","clojure.data.xml.protocols/qname-uri","clojure.data.xml.name/qname-local","clojure.data.xml.protocols/qname-local","var_args","G__36671","clojure.data.xml.name/qname","js/Error","local","clojure.data.xml.name.qname","cljs.core.keyword","clojure.string/blank?","G__36672","prefix","clojure.data.xml.name/namespaced?","qn","clojure.data.xml.name/clj-ns-name","ns","cljs.core/Namespace","cljs.core/ns-name","cljs.core/Keyword","cljs.core/name","clojure.data.xml.name/xmlns-uri","clojure.data.xml.name/xml-uri","cljs.core/PROTOCOL_SENTINEL","kw","temp__5751__auto__","cljs.core/namespace","G__36673","cljs.core._EQ_","clojure.data.xml.name/as-qname","n","clojure.data.xml.name/uri-file","clojure.string/replace","clojure.data.xml.name/print-uri-file-command!","cljs.core.println","clojure.data.xml.name/xmlns-attr?","clojure.data.xml.name/xmlns-attr-prefix","clojure.data.xml.name/legal-xmlns-binding!","cljs.core.not_EQ_","clojure.data.xml.name/separate-xmlns","attrs","cont","G__36677","vec__36678","cljs.core.nth","vec__36686","attrs*","cljs.core/transient","xmlns*","attrs'","cljs.core/keys","cljs.core/seq","val","cljs.core.get","cljs.core.assoc_BANG_","cljs.core/next","G__36689","G__36690","cljs.core/persistent!","clojure.data.xml.name/prefix-alphabet","cljs.core.apply","cljs.core/str","cljs.core.map","js/String.fromCharCode","cljs.core.range","G__36692","clojure.data.xml.name/gen-prefix","c","clojure.data.xml.name/*gen-prefix-counter*","clojure.data.xml.name.gen_prefix","cnt","sb","js/goog.string.StringBuffer","n*","ch","cljs.core/mod","n**","cljs.core/quot"],"sourcesContent":[";   Copyright (c) Rich Hickey. All rights reserved.\n;   The use and distribution terms for this software are covered by the\n;   Eclipse Public License 1.0 (http://opensource.org/licenses/eclipse-1.0.php)\n;   which can be found in the file epl-v10.html at the root of this distribution.\n;   By using this software in any fashion, you are agreeing to be bound by\n;   the terms of this license.\n;   You must not remove this notice, or any other, from this software.\n\n(ns clojure.data.xml.name\n  #?@(:clj [(:require [clojure.string :as str]\n                      [clojure.data.xml.jvm.name :as jvm]\n                      (clojure.data.xml\n                       [impl :refer [export-api]]\n                       [protocols :as protocols :refer [AsQName]]))\n            (:import (clojure.lang Namespace Keyword))]\n      :cljs [(:require-macros\n              [clojure.data.xml.impl :refer [export-api]])\n             (:require [clojure.string :as str]\n                       [clojure.data.xml.js.name :as jsn]\n                       [clojure.data.xml.protocols :as protocols :refer [AsQName]])\n             (:import (goog.string StringBuffer))]))\n\n(export-api\n #?@(:clj  [jvm/parse-qname jvm/encode-uri jvm/decode-uri]\n     :cljs [jsn/parse-qname jsn/encode-uri jsn/decode-uri]))\n\n;; protocol functions can be redefined by extend-*, so we wrap\n;; protocols/qname-uri protocols/qname-local within regular fns\n\n(defn uri-symbol [uri]\n  (symbol (encode-uri (str \"xmlns.\" uri))))\n\n(defn symbol-uri [ss]\n  (let [du (decode-uri (str ss))]\n    (if (.startsWith du \"xmlns.\")\n      (subs du 6)\n      (throw (ex-info \"Uri symbol not valid\" {:sym ss})))))\n\n(defn qname-uri\n  \"Get the namespace uri for this qname\"\n  [v]\n  (protocols/qname-uri v))\n\n(defn qname-local\n  \"Get the name for this qname\"\n  [v]\n  (protocols/qname-local v))\n\n(defn qname\n  ([local] (qname \"\" local))\n  ([uri local] (keyword (when-not (str/blank? uri)\n                          (encode-uri (str \"xmlns.\" uri)))\n                        local))\n  ([uri local prefix] (qname uri local)))\n\n;; The empty string shall be equal to nil for xml names\n(defn namespaced? [qn]\n  (not (str/blank? (qname-uri qn))))\n\n(defn- clj-ns-name [ns]\n  (cond (instance? Namespace ns) (ns-name ns)\n        (keyword? ns) (name ns)\n        :else (str ns)))\n\n;; xmlns attributes get special treatment. they go into metadata, don't contribute to equality\n(def xmlns-uri \"http://www.w3.org/2000/xmlns/\")\n;; TODO find out if xml prefixed names need any special treatment too\n(def xml-uri \"http://www.w3.org/XML/1998/namespace\")\n\n(extend-protocol AsQName\n  Keyword\n  (qname-local [kw] (name kw))\n  (qname-uri [kw]\n    (if-let [ns (namespace kw)]\n      (if (.startsWith ns \"xmlns.\")\n        (decode-uri (subs ns 6))\n        (if (= \"xmlns\" ns)\n          xmlns-uri\n          (throw (ex-info \"Keyword ns is not an xmlns. Needs to be in the form :xmlns.<encoded-uri>/<local>\"\n                          {:kw kw}))))\n      \"\")))\n\n(defn as-qname [n]\n  (qname (qname-uri n) (qname-local n)))\n\n(defn uri-file\n  \"Dummy file name for :require'ing xmlns uri\"\n  [uri]\n  (str (str/replace (name (uri-symbol uri))\n                    \".\" \"/\")\n       \".cljc\"))\n\n(defn print-uri-file-command!\n  \"Shell command to create a dummy file for xmlns. Execute from a source root.\"\n  [uri]\n  (println  \"echo \\\"(ns\" (str (uri-symbol uri) \")\\\" >\") (uri-file uri)))\n\n#?(:clj\n   (defn alias-uri\n     \"Define a Clojure namespace aliases for xmlns uris.\n\n  This sets up the current namespace for reading qnames denoted with\n  Clojure's ::alias/keywords reader feature.\n  \n\n  ## Example\n  (alias-uri :D \\\"DAV:\\\")\n                           ; similar in effect to\n  ;; (require '[xmlns.DAV%3A :as D])\n                           ; but required namespace is auto-created\n                           ; henceforth, shorthand keywords can be used\n  {:tag ::D/propfind}\n                           ; ::D/propfind will be expanded to :xmlns.DAV%3A/propfind\n                           ; in the current namespace by the reader\n\n  ## Clojurescript support\n  Currently, namespaces can't be auto-created in Clojurescript.\n  Dummy files for aliased uris have to exist. Have a look at `uri-file` and `print-uri-file-command!` to create those.\"\n     {:arglists '([& {:as alias-nss}])}\n     [& ans]\n     (loop [[a n & rst :as ans] ans]\n       (when (seq ans)\n         (assert (<= (count ans)) (pr-str ans))\n         (let [xn (uri-symbol n)\n               al (symbol (clj-ns-name a))]\n           (create-ns xn)\n           (alias al xn)\n           (recur rst))))))\n\n(defn xmlns-attr?\n  \"Is this qname an xmlns declaration?\"\n  [qn]\n  (let [uri (qname-uri qn)]\n    (or (= xmlns-uri uri)\n        (and (str/blank? uri)\n             (= \"xmlns\" (qname-local qn))))))\n\n(defn xmlns-attr-prefix [qn]\n  (let [uri (qname-uri qn)]\n    (if (str/blank? uri)\n      (do (when-not (= \"xmlns\" (qname-local qn))\n            (throw (ex-info \"Not an xmlns-attr name\" {:qname qn})))\n          \"\")\n      (do (when-not (= xmlns-uri uri)\n            (throw (ex-info \"Not an xmlns-attr name\" {:qname qn})))\n          (qname-local qn)))))\n\n(defn legal-xmlns-binding! [prefix uri]\n  (when (not= (= \"xml\" prefix)\n              (= xml-uri uri))\n    (throw (ex-info (str \"The xmlns binding for prefix `xml` is fixed to `\" xml-uri \"`\")\n                    {:attempted-mapping {:prefix prefix :uri uri}})))\n  (when (not= (= \"xmlns\" prefix)\n              (= xmlns-uri uri))\n    (throw (ex-info (str \"The xmlns binding for prefix `xmlns` is fixed to `\" xmlns-uri \"`\")\n                    {:attempted-mapping {:prefix prefix :uri uri}}))))\n\n(defn separate-xmlns\n  \"Call cont with two args: attributes and xmlns attributes\"\n  [attrs cont]\n  (loop [attrs* (transient {})\n         xmlns* (transient {})\n         [qn :as attrs'] (keys attrs)]\n    (if (seq attrs')\n      (let [val (get attrs qn)]\n        (if (xmlns-attr? qn)\n          (let [prefix (xmlns-attr-prefix qn)]\n            (legal-xmlns-binding! prefix val)\n            (recur attrs*\n                   (assoc! xmlns* prefix val)\n                   (next attrs')))\n          (recur (assoc! attrs* qn val)\n                 xmlns*\n                 (next attrs'))))\n      (cont (persistent! attrs*) (persistent! xmlns*)))))\n\n;(set! *warn-on-reflection* true)\n\n#?(:clj (def ^:private ^\"[C\" prefix-alphabet\n          (char-array\n           (map char\n                (range (int \\a) (inc (int \\z))))))\n   :cljs (def ^:private prefix-alphabet\n           (apply str (map js/String.fromCharCode\n                           (range (.charCodeAt \"a\" 0)\n                                  (inc (.charCodeAt \"z\" 0)))))))\n\n(def ^{:dynamic true\n       :doc \"Thread local counter for a single document\"}\n  *gen-prefix-counter*)\n\n(defn gen-prefix\n  \"Generates an xml prefix.\n   Zero-arity can only be called, when *gen-prefix-counter* is bound and will increment it.\"\n  ([] (let [c *gen-prefix-counter*]\n        #?(:cljs (when (undefined? c)\n                   (throw (ex-info \"Not bound: *gen-prefix-counter*\" {:v #'*gen-prefix-counter*}))))\n        (set! *gen-prefix-counter* (inc c))\n        (gen-prefix c)))\n  ([n]\n   (let [cnt (alength prefix-alphabet)\n         sb #?(:clj (StringBuilder.) :cljs (StringBuffer.))]\n     (loop [n* n]\n       (let [ch (mod n* cnt)\n             n** (quot n* cnt)]\n         (.append sb (aget prefix-alphabet ch))\n         (if (pos? n**)\n           (recur n**)\n           (str sb)))))))\n\n"]}