{"version":3,"sources":["svg_clj/elements.cljc"],"mappings":";AAUA,AAAKA,oCAAiBC;AAEtB;;;0BAAA,1BAAMC,4DAEHC;AAFH,AAAA,0FAAA,yDAAA,2CAAA,iDAAA,IAAA,gDAAA,IAAA,+CAG2BA;;AAE3B;;;2BAAA,3BAAMC,8DAEHC,GAAGC;AAFN,AAAA,0FAAA,2DAAA,2CAAA,iDAAA,IAAA,gDAAA,IAAA,oDAAA,HAG6BD,oDAAOC;;AAEpC;;;wBAAA,xBAAMC,wDAEHC,KAAKC;AAFR,AAGE,IAAAC,aAAcF;SAAd,AAAAG,4CAAAD,WAAA,IAAA,hEAAOG;SAAP,AAAAF,4CAAAD,WAAA,IAAA,hEAAUI;IAAVF,aACcH;SADd,AAAAE,4CAAAC,WAAA,IAAA,hEACOG;SADP,AAAAJ,4CAAAC,WAAA,IAAA,hEACUI;AADV,AAAA,0FAAA,oDAAA,2CAAA,qDAAA,mDAAA,qDAAA,3GAEcH,mDAAOC,qDAAOC,oDAAOC;;AAErC;;;;2BAAA,3BAAMC,8DAGHC;AAHH,AAAA,0FAAA,0DAAA,2CAAA,0DAIqB,kDAAA,lDAACC,sDAAa,AAACC,4CAAIC,sBAAWH;;AAEnD;;;;4BAAA,5BAAMI,gEAGHJ;AAHH,AAAA,0FAAA,8DAAA,2CAAA,0DAIsB,kDAAA,lDAACC,sDAAa,AAACC,4CAAIC,sBAAWH;;AAEpD;;;wBAAA,xBAAMK,wDAEHC,EAAEC;AAFL,AAAA,0FAAA,qDAAA,2CAAA,yDAAA,2DAAA,0DAAA,vHAGiBD,2DAAUC,iDAAK,KAAA,JAAGD,0DAAW,KAAA,JAAGC;;AAEjD;;;yBAAA,zBAAMC,0DAEHC,IAAIH,EAAEC;AAFT,AAAA,0FAAA,sDAAA,2CAAA,yDAAA,yDAAA,2DAAA,0DAAA,lLAGiBE,2DAAWH,2DAAUC,iDAAK,KAAA,JAAGD,0DAAW,KAAA,JAAGC;;AAE5D;;;;wBAAA,xBAAMG,wDAGHC;AAHH,AAAA,0FAAA,sDAAA,2CAAA,+CAAA,IAAA,gDAAA,IAAA,gEAAA,KAAA,kEAAA,SAAA,8EAAA,iBAQuCA;;AAEvC,AAAA;;;qBAAA,6BAAAC,lDAAMM;AAAN,AAAA,IAAAL,qBAAA;AAAA,AAAA,IAAAC,0BAAA,AAAA;AAAA,AAAA,IAAAC,wBAAA;;AAAA,AAAA,GAAA,CAAAA,wBAAAD;AAAA,AAAA,AAAAD,wBAAA,CAAA,UAAAE;;AAAA,eAAA,CAAAA,wBAAA;;;;AAAA;;;;AAAA,IAAAC,uBAAA,EAAA,CAAA,MAAA,AAAAH,4BAAA,AAAA,KAAAI,qBAAA,AAAAJ,yBAAA,KAAA,IAAA,OAAA;AAAA,AAAA,OAAAK,wDAAAF;;;AAAA,AAAA,CAAA,0DAAA,1DAAME,qEAEDI;AAFL,AAGE,GAAI,EAAK,6CAAA,7CAACC,iDAAI,AAACC,gBAAMF,eACZ,GAAK,sDAAAG,rDAAU,AAACC,gBAAM,AAACA,gBAAMJ;AAEpC,oDAAA,mFAAA,+CAAA,/KAACK,0NAAa,AAACD,gBAAMJ;;AAErB,oDAAA,mFAAA,+CAAA,/KAACK,0NAAa,AAACC,+CAAO,AAACC,qBAAWC,sBAAMR;;;;AAR5C,CAAA,6CAAA,7CAAMJ;;AAAN;AAAA,CAAA,uCAAA,WAAAC,lDAAMD;AAAN,AAAA,IAAAE,qBAAA;AAAA,AAAA,OAAAA,wDAAA,AAAAC,cAAAF;;;AAAA","names":["svg-clj.elements/svg-element-keys","svg-clj.utils/svg-element-keys","svg-clj.elements/circle","r","svg-clj.elements/ellipse","rx","ry","svg-clj.elements/line","pt-a","pt-b","vec__37353","cljs.core.nth","vec__37356","ax","ay","bx","by","svg-clj.elements/polygon","pts","clojure.string.join","cljs.core.map","svg-clj.utils/v->s","svg-clj.elements/polyline","svg-clj.elements/rect","w","h","svg-clj.elements/image","url","svg-clj.elements/text","text","var_args","args__4824__auto__","len__4818__auto__","i__4819__auto__","argseq__4825__auto__","cljs.core/IndexedSeq","svg-clj.elements/g","seq37382","self__4806__auto__","cljs.core/seq","content","cljs.core._EQ_","cljs.core/count","cljs.core/Keyword","cljs.core/first","cljs.core.into","cljs.core.filter","cljs.core/complement","cljs.core/nil?"],"sourcesContent":["(ns svg-clj.elements\n  \"Provides functions to generate the renderable SVG elements.\n  Every function in this namespace emits hiccup style data structures, and have the following shape: `[:tag {:prop \\\"value\\\"}]`, except g (group) and text which emit: `[:tag {:prop \\\"value\\\"} \\\"content\\\"]`.\n\n  All functions in this namespace emit the primitive elements of an SVG image. These primitives are the basis for further manipulation using transform functions from [[svg-clj.transforms]].\n\n  One notable element which is not provided is `path`. Since path elements have a more complex property specification, the [[svg-clj.path]] namespace is dedicated to path element generation.\"\n  (:require [clojure.string :as str]\n            [svg-clj.utils :as utils]))\n\n(def svg-element-keys utils/svg-element-keys)\n\n(defn circle\n  \"Emits a circle element with radius `r` centered at the origin.\"\n  [r]\n  [:circle {:cx 0 :cy 0 :r r}])\n\n(defn ellipse\n  \"Emits an ellipse element with x-axis radius `rx` and y-axis radius `ry` centered at the origin.\"\n  [rx ry]\n  [:ellipse {:cx 0 :cy 0 :rx rx :ry ry}])\n\n(defn line\n  \"Emits a line element starting at 2d point `pt-a` and ending at 2d point `pt-b`.\"\n  [pt-a pt-b]\n  (let [[ax ay] pt-a\n        [bx by] pt-b]\n    [:line {:x1 ax :y1 ay :x2 bx :y2 by}]))\n\n(defn polygon\n  \"Emits a polygon element with 2d points from vector or list `pts`.\n  Polygon elements have a closed path.\"\n  [pts]\n  [:polygon {:points (str/join \" \" (map utils/v->s pts))}])\n\n(defn polyline\n  \"Emits a polyline element with 2d points from vector or list `pts`.\n  Polyline elements have an open path.\"\n  [pts]\n  [:polyline {:points (str/join \" \" (map utils/v->s pts))}])\n\n(defn rect\n  \"Emits a rect element of width `w` and height `h` centered at the origin.\"\n  [w h]\n  [:rect {:width w :height h :x (/ w -2.0) :y (/ h -2.0)}])\n\n(defn image\n  \"Emits an image element of the image specified at `url`, of width `w`, and height `h` centered at the origin.\"\n  [url w h]\n  [:image {:href url :width w :height h :x (/ w -2.0) :y (/ h -2.0)}])\n\n(defn text\n  \"Emits a text element containing `text` of font-size 12pt.\n  By default, text is centered at the origin by setting text-anchor='middle' and dominant-baseline='middle'. These defaults can be changed using [[svg-clj.transforms/style]] to override any preset properties.\"\n  [text]\n  [:text {:x 0\n          :y 0\n          :font-size 12\n          :text-anchor \"middle\"\n          :dominant-baseline \"middle\"} text])\n\n(defn g\n  \"Emits a g (group) element.\"\n  [& content]\n  (if (and (= 1 (count content))\n           (not (keyword? (first (first content)))))\n    ;; content is a list of a list of elements\n    (into [:g {}] (first content))\n    ;; content is a single element OR a list of elements\n    (into [:g {}] (filter (complement nil?) content))))\n"]}