{"version":3,"sources":["clojure/data/xml/js/dom.cljs"],"mappings":";AAKA,AAAKA,8BACH,kCAAA,QAAA,1CAAI,KAAAC;AAGN;;;oCAAA,pCAAMC,gFAEHC;AAFH,AAGE,OAAiBH,2CAAIG;;AAEvB,AAAA;;;wCAAA,gDAAAC,xFAAME;AAAN,AAAA,IAAAD,WAAA,AAAA;AAAA,AAAA,QAAAA;KAAA;AAAA,OAAAC,oEAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,oEAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;;AAAA,MAAA,KAAAC,MAAA,CAAA,8DAAA,AAAA;;;;;AAAA,CAAA,sEAAA,tEAAMD,iFAEFE,IAAIC,MAAMC,QAAQC;AAFtB,AAGG,IAAMC,KAAG,AAACC,oEAASL,IAAIC,MAAMC;AAA7B,AACE,IAAAI,eAAUF;AAAV,AAAA,AAAA,CAAA,AAAAE,gCAAAC;;AAAA,CAAA,AAAAD,6CAEE,WAAQE;AAAR,AAAA,YAAA,RAAQA;AAAR,AAAWL;;;AAFb,CAAA,AAAAG,oCAAAC;;AAAA,CAAA,AAAAD,sDAIE,WAAaE,EAAEL;AAAf,AAAA,YAAA,RAAaK;AAAb,AACE,IAAAC,SAAA,AAAAC,gBAASN;AAAT,AAAA,AAAA,CAAA,AAAAK,0BAAAF;;AAAA,CAAA,AAAAE,uCAEE,WAAQD;AAAR,AAAA,YAAA,RAAQA;AAAR,AAAWL;;;AAFb,CAAA,AAAAM,8BAAAF;;AAAA,CAAA,AAAAE,gDAIE,WAAaD,MAAEL;AAAf,AAAA,YAAA,RAAaK;AAAb,AACE,OAACG,qBAAWP,GAAGD;;;AALnBM;;;AALJH;AAWAF;;;AAfL,CAAA,sEAAA,tEAAMN,iFAgBFE,IAAIC,MAAMC;AAhBd,AAiBG,IAAME,KAAG,AAAkBZ,4CAAI,AAACoB,gCAAUZ,KAAK,AAACa,kCAAYb;AAA5D,AACE,AAACc,oBAAU,WAAKN,EAAEO,EAAEC;AAAT,AACE,IAAMC,MAAI,AAACL,gCAAUG;AAArB,AACE,GAAI,iDAAA,jDAACG,6CAAED;AACL,OAAeb,gBAAG,CAAA,qDAAc,AAACS,kCAAYE,cAAIC;;AACjD,OAAiBZ,kBAAGa,IAAI,AAACJ,kCAAYE,GAAGC;;GAJzD,KAKef;;AACf,AAACkB,+CAAO,WAAKX,EAAEY;AAAP,AACE,OAAchB,eAAG,EAAI,OAASgB,gBACX,AAAC1B,kCAAU0B,GACXA;GAH7B,KAIYlB;;AACZE;;;AA7BL,CAAA,gEAAA,hEAAMN;;AAAN,AA+BA,AAAA;;;kCAAA,0CAAAF,5EAAM0B;AAAN,AAAA,IAAAD,WAAA,AAAA;AAAA,AAAA,QAAAA;KAAA;AAAA,OAAAC,8DAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,8DAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;;AAAA,IAAAC,yBAAA;AAAA,AAAA,IAAAC,0BAAA,AAAA;AAAA,AAAA,IAAAC,wBAAA;;AAAA,AAAA,GAAA,CAAAA,wBAAAD;AAAA,AAAA,AAAAD,4BAAA,CAAA,UAAAE;;AAAA,eAAA,CAAAA,wBAAA;;;;AAAA;;;;AAAA,IAAAC,uBAAA,KAAAC,qBAAA,AAAAJ,6BAAA,KAAA,IAAA;AAAA,AAAA,OAAAD,qEAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAAI;;;;;AAAA,CAAA,gEAAA,hEAAMJ,2EAEFtB;AAFJ,AAES,+EAAA,KAAA,7EAACK,oEAASL;;;AAFnB,CAAA,gEAAA,hEAAMsB,2EAGFtB,IAAIC;AAHR,AAGe,qFAAA,9EAACI,oEAASL,IAAIC;;;AAH7B,AAAA,CAAA,uEAAA,vEAAMqB,kFAIFtB,IAAIC,MAAQC;AAJhB,AAIyB,OAACG,oEAASL,IAAIC,MAAMC;;;AAJ7C;AAAA,CAAA,oDAAA,WAAA0B,/DAAMN;AAAN,AAAA,IAAAO,WAAA,AAAAC,gBAAAF;IAAAA,eAAA,AAAAG,eAAAH;IAAAI,WAAA,AAAAF,gBAAAF;IAAAA,eAAA,AAAAG,eAAAH;AAAA,AAAA,IAAAK,qBAAA;AAAA,AAAA,OAAAA,wDAAAJ,SAAAG,SAAAJ;;;AAAA,CAAA,0DAAA,1DAAMN;;AAAN,AAMA;;;gCAAA,hCAAMY,wEAEHhC;AAFH,AAGE,OAAqBV,+CAAIU;;AAE3B;;;sCAAA,tCAAMiC,oFAEHjC;AAFH,AAGE,OAAgBV,0CAAIU;;AAEtB,AAAA,AAEA;;;oCAAA,pCAAMkC,gFAEHC;AAFH,AAGE,IAAMC,IAAE,AAAyB9C;AAAjC,AACE,IAAA+C,mBAAA,AAAAC,cAAWH;IAAXI,qBAAA;IAAAC,qBAAA;IAAAC,iBAAA;;AAAA,AAAA,GAAA,AAAA,CAAAA,iBAAAD;AAAA,eAAA,AAAAD,wDAAAE,nEAAQvC;AAAR,AAAA,AACE,AAAckC,cAAE,CAACY,qEAAAA,+EAAAA,ZAAa9C,2DAAAA;;AADhC;AAAA,eAAAmC;eAAAE;eAAAC;eAAA,CAAAC,iBAAA;;;;;;;AAAA,IAAAC,2BAAA,AAAAJ,cAAAD;AAAA,AAAA,GAAAK;AAAA,AAAA,IAAAL,uBAAAK;AAAA,AAAA,GAAA,AAAAC,6BAAAN;AAAA,IAAAO,wBAAA,AAAAC,sBAAAR;AAAA,AAAA,eAAA,AAAAS,qBAAAT;eAAAO;eAAA,AAAAG,gBAAAH;eAAA;;;;;;;AAAA,eAAA,AAAAhB,gBAAAS,3BAAQnC;AAAR,AAAA,AACE,AAAckC,cAAE,CAACY,qEAAAA,+EAAAA,ZAAa9C,2DAAAA;;AADhC;AAAA,eAAA,AAAA2B,eAAAQ;eAAA;eAAA;eAAA;;;;;;;;AAAA;;;;;AAEA,OAAcD;;AAOlB,AAAKa,+BAAK,AAACC,eAAK,kCAAA,lCAAC1D;AACjB,AAAK2D,kCAAQ,AAACD,eAAK,8DAAA,9DAACE;AACpB,AAAKC,uCAAa,AAACH,eAAK,AAAc,8DAAA,9DAACE;AACvC,AAAKE,mCAAS,AAACJ,eAAK,kCAAA,lCAAChB;AACrB,AAAKqB,+BAAK,AAACL,eAAK,iOAAA,hOAAM,AAAc,8DAAA,+CAAA,2CAAA,gDAAA,xMAACE;AACrC,AAAKI,gCAAM,AAACN,eAAK,8BAAA,9BAAClB;AAClB,AAAKyB,kCAAQ,AAACP,eAAK,oCAAA,pCAACjB;AAMpB;;;uCAAA,vCAAMe,sFAEH9C;AAFH,AAGE,GACE,OAASA;AAAI,OAACV,kCAAUU;;AAD1B,GAEE,eAAWwD,dAAWxD;AAAI,OAAC8B,8BAAM,AAAU9B;;AAF7C,GAGE,eAAWyD,dAAazD;AAAI,OAAC+B,oCAAY,AAAU/B;;AAHrD,GAIE,eAAWiD,dAAQjD;AAAIA;;AAJzB,GAKE,eAAWsD,dAAMtD;AAAIA;;AALvB,GAME,eAAWuD,dAAQvD;AAAIA;;AANzB,GASE,GAAA,YAAA,XAAO,AAAQA;AAAKA;;AATtB,GAUE,eAAW+C,dAAK/C;AAAIA;;AAVtB,GAWE,EAAA,GAAA,OAAA,SAAA,EAAA,EAAA,CAAA,yCAAA,YAAA,CAAAG,gCAAA,0BAAA,KAAA,EAAA,EAAA,yCAAA,AAAAuD,wDAAA,QAAA,AAAAA,9BAAYC,gEAAAA,xRAAQ3D,oBAAAA,sFAAAA,mCAAAA,6FAAAA,gEAAAA;AAAI,OAACC,oEAAS,AAAA,kFAAMD,IACN,AAAA,sFAAQA,IACR,AAAC4D,4CAAId,qCAAa,AAAA,uFAAU9C;;AAbhE,GAcE,EAAA,GAAA,OAAA,SAAA,EAAA,EAAA,CAAA,yCAAA,iBAAA,CAAAG,gCAAA,8BAAA,KAAA,EAAA,EAAA,yCAAA,AAAAuD,4DAAA,QAAA,AAAAA,lCAAYG,oEAAAA,rSAAY7D,oBAAAA,2FAAAA,uCAAAA,iGAAAA,oEAAAA;AAAI,OAACgC,kCAAUhC;;AAdzC,AAeQ,MAAO,gDAAA,gBAAA,2CAAA,3GAAC8D,iKAA+B9D;;;;;;;;;;;;;AAIjD,0CAAA,1CAAO+D,4FAAiB/D;AAAxB,AACE,OAACgE,0DAAM,AAAgBhE,gBAChB,AAAaA;;AAEtB,4CAAA,5CAAOiE,gGAAaC;AAApB,AACE,QAAYC,oCAAU,AAAgBD;;AACxC,AAAKE,gDAAsB,AAACC,+CAAOJ;AACnC,AAAKK,6CAAmB,+DAAA,/DAACC,gDAAQC,kDAAQJ;AACzC,AAAKK,gDAAsB,AAACC,+CAAOT;AACnC,AAAKU,6CAAmB,+DAAA,/DAACJ,gDAAQC,kDAAQC;AAEzC,AAAA,4CAAA,oDAAAjF,hGAAMqF;AAAN,AAAA,IAAAD,WAAA,AAAA;AAAA,AAAA,QAAAA;KAAA;AAAA,OAAAC,wEAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,wEAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;;AAAA,MAAA,KAAAlF,MAAA,CAAA,8DAAA,AAAA;;;;;AAAA,CAAA,0EAAA,1EAAMkF,qFACF7E;AADJ,AACQ,OAAC8E,wEAAkBV,8CAAsBpE;;;AADjD,CAAA,0EAAA,1EAAM6E,qFAEFE,GAAG/E;AAFP,AAGG,OAACgF,kDACAD,GACA,AAACE,mDACA,WAAKC,GAAGC;AAAR,AACE,OAACC,oDAAOF,GACA,AAACnB,wCAAgBoB,WACjB,AAASA;GACnBE,4BACD,qBAAA,rBAACC,yDACD,AAACC,kDAAUvF;;;AAZf,CAAA,oEAAA,pEAAM6E;;AAAN,AAcA,AAAA,AAEA,wCAAA,xCAAOW,wFAAeC;AAAtB,AACE,oDAAA,7CAACC,8EAAQ,AAAC9B,4CAAI+B,sCAAc,AAACJ,kDAAUE;;AAEzC,kCAAA,lCAAOG,4EAAS5E;AAAhB,AACE,GAAI,cAAW+B,bAAK/B;AAClB,OAAaA;;AACbA;;;AAEJ;;;uCAAA,vCAAM2E,sFAEH3F;AAFH,AAGE,GACE,eAAWuD,dAAQvD;AACnB,OAAC6F,kCAAiB,AAAQ7F;;AAF5B,GAGE,eAAWsD,dAAMtD;AACjB,OAAC8F,4BAAW,AAAQ9F;;AAJtB,GAKE,eAAW+C,dAAK/C;AAChB,OAAaA;;AANf,GAOE,eAAWiD,dAAQjD;AACnB,iQAAA,2CAAA,rSAAC+F,kEAAc,AAAChC,wCAAgB/D,IACjB,AAAC8E,wEAAkB,AAAc9E,eACjC,AAACwF,sCAAc,AAAcxF,6IACN,AAAC8E,wEACAL,8CACA,AAAczE;;AAbvD,oBAeE,AAAkBA;AAClB,OAAC8E,wEAAkB9E;;AAhBrB,GAiBE,eAAWoD,dAASpD;AAAI,OAACwF,sCAAcxF;;AAjBzC,GAkBE,OAASA;AAAIA;;AAlBf,GAmBE,EAAA,GAAA,OAAA,SAAA,EAAA,EAAA,CAAA,yCAAA,YAAA,CAAAG,gCAAA,0BAAA,KAAA,EAAA,EAAA,yCAAA,AAAAuD,wDAAA,QAAA,AAAAA,9BAAYC,gEAAAA,xRAAQ3D,oBAAAA,sFAAAA,mCAAAA,6FAAAA,gEAAAA;AAAIA;;AAnB1B,GAoBE,EAAA,GAAA,OAAA,SAAA,EAAA,EAAA,CAAA,yCAAA,iBAAA,CAAAG,gCAAA,8BAAA,KAAA,EAAA,EAAA,yCAAA,AAAAuD,4DAAA,QAAA,AAAAA,lCAAYG,oEAAAA,rSAAY7D,oBAAAA,2FAAAA,uCAAAA,iGAAAA,oEAAAA;AAAIA;;AApB9B,AAqBQ,MAAO,gDAAA,sCAAA,2CAAA,jIAAC8D,4LAAwD9D;;;;;;;;;;;;AAE1E,mDAAA,nDAAMgG;AAAN,AACE,AAAA,CAAA,AAAA,4DAAA7F,5DAAa8C;;AAAb,CAAA,AAAA,6DAAA9C,7DAAa8C;;AAAb,CAAA,AAAA,AAAaA,0EAGX,WAAQjD;AAAR,AAAA,aAAA,TAAQA;AAAR,AAAA,kDAAA,mFACyB,AAAC2E,2CACA,AAAc3E;;;AAL1C,CAAA,AAAA,+DAAAG,/DAAa8C;;AAAb,CAAA,AAAA,AAAaA,8EAOX,WACIjD,GAAGW;AADP,AAAA,aAAA,TACIX;AADJ,AAEG,IAAAiG,WAAMtF;IAANsF,eAAA,EAAA,CAAAA,oBAAAC,oBAAA,AAAAD,aAAA;AAAA,AAAA,QAAAA;KAAA;AACO,OAAClC,wCAAgB/D;;;KADxB;AAES,OAAcA;;;KAFvB;AAGW,OAAcA;;;;AACvB,MAAO,gDAAA,qBAAA,2CAAA,sDAAA,tKAAC8D,oKAAmCnD,oDAAMX;;;;;AAbxD,CAAA,AAAA,AAAaiD,8EAOX,WAOIjD,GAAGW,EAAEwF;AAPT,AAAA,aAAA,TAOInG;AAPJ,AAaG,IAAAoG,WAAMzF;IAANyF,eAAA,EAAA,CAAAA,oBAAAF,oBAAA,AAAAE,aAAA;AAAA,AAAA,QAAAA;KAAA;AACO,OAACrC,wCAAgB/D;;;KADxB;AAES,OAACsE,2CAAmB,AAActE;;;KAF3C;AAGW,OAAcA;;;;AACvBmG;;;;;AAxBP,CAAA,AAAA,gEAAAhG,hEAAa8C;;AAAb,CAAA,AAAA,AAAaA,8EA0BX,WAASoD;AAAT,AAAA,aAAA,TAASA;AAAT,AAAA;;;AA1BF,CAAA,AAAA,8DAAAlG,9DAAa8C;;AAAb,CAAA,AAAA,AAAaA,4EA4BX,WAASqD,IAAIC;AAAb,AAAA,cAAA,VAASD;AAAT,AACE,AAMI,8OAAA,rOAAK,AAACxF,6CAAE,AAAA,kFAAMwF,SAAK,AAAA,kFAAMC,aACpB,AAACzF,6CAAE,AAAA,sFAAQwF,SAAK,AAAA,sFAAQC,WACxB,AAACzF,6CAAE,AAAA,uFAAUwF,SAAK,AAAA,uFAAUC;;;;AACzC,AAAA,CAAA,AAAA,iEAAApG,jEAAagD;;AAAb,CAAA,AAAA,qEAAAhD,rEAAagD;;AAAb,CAAA,AAAA,AAAaA,iFAGX,WAAOkD;AAAP,AAAA,aAAA,TAAOA;AAAP,AAAW,OAACd,kDAAUc;;;AAHxB,CAAA,AAAA,oEAAAlG,pEAAagD;;AAAb,CAAA,AAAA,AAAaA,mFAKX,WACItD,MAAM2G;AADV,AAAA,gBAAA,ZACI3G;AADJ,AAEG,IAAA4G,qBAAW,AAAiB5G,yBAAM,AAACW,gCAAUgG,MAAM,AAAC/F,kCAAY+F;AAAhE,AAAA,oBAAAC;AAAA,QAAAA,JAASC;AAAT,AACE,OAASA;;AADX;;;;AAPL,CAAA,AAAA,AAAavD,mFAKX,WAKItD,MAAM2G,KAAKG;AALf,AAAA,gBAAA,ZAKI9G;AALJ,AASG,IAAA4G,qBAAW,AAAiB5G,yBAAM,AAACW,gCAAUgG,MAAM,AAAC/F,kCAAY+F;AAAhE,AAAA,oBAAAC;AAAA,QAAAA,JAASC;AAAT,AACE,OAASA;;AACTC;;;;AAhBP,CAAA,AAAA,qEAAAxG,rEAAagD;;AAAb,CAAA,AAAA,AAAaA,mFAkBX,WAASkD;AAAT,AAAA,aAAA,TAASA;AAAT,AAAa,OAACtF,+CAAO,WAAK6F,IAAIJ;AAAT,AACE,GAAI,AAACvC,0CAAYuC;AACfI;;AACA,cAAA,NAAKA;;GAHjB,IAIUP;;;AAtBzB,CAAA,AAAA,sEAAAlG,tEAAagD;;AAAb,CAAA,AAAA,AAAaA,wFAwBX,WAAakD,GAAGnE,EAAE2E;AAAlB,AAAA,aAAA,TAAaR;AAAb,AACE,OAACtF,+CAAO,WAAK6F,IAAIJ;AAAT,AACE,GAAI,AAACvC,0CAAYuC;AACfI;;AACA,IAAAE,WAAGF;IAAHG,WAAO,AAAChD,wCAAgByC;IAAxBQ,WAA8B,AAASR;AAAvC,AAAA,0EAAAM,SAAAC,SAAAC,wBAAAF,SAAAC,SAAAC,9HAAC9E,kCAAAA,8DAAAA;;GACL2E,KAAKR;;;AA7BjB,CAAA,AAAA,mEAAAlG,nEAAagD;;AAAb,CAAA,AAAA,AAAaA,iFA+BX,WAAS8D,IAAIC;AAAb,AAAA,cAAA,VAASD;AAAT,AAEE,IAAAE,mBAAI,CAAYF,YAAIC;AAApB,AAAA,GAAAC;AAAAA;;AACI,IAAAC,oBAAK,CAAY,AAACvE,gBAAMoE,aAAK,AAACpE,gBAAMqE;AAApC,AAAA,GAAAE;AACK,OAAC1G,oBAAU,WAAKN,EAAEiH,GAAGzG;AAAV,AAEE,IAAAuG,uBAAI,CAAYvG,MAAE,mDAAA,nDAAC0G,4CAAIJ,IAAIG;AAA3B,AAAA,GAAAF;AAAAA;;AACI,yBAAA,lBAACI;;GAHlB,KAIgBN;;AALrBG;;;;;AAMR,AAAA,CAAA,AAAA,iEAAAjH,jEAAaiD;;AAAb,CAAA,AAAA,AAAaA,6EAGX,WAAOqC;AAAP,AAAA,aAAA,TAAOA;AAAP,AAAW,OAACrD,cAAI,AAACwB,4CAAIgC,gCAAQ,AAACL,kDAAUE;;;AAH1C,CAAA,AAAA,oEAAAtF,pEAAaiD;;AAAb,CAAA,AAAA,iEAAAjD,jEAAaiD;;AAAb,CAAA,AAAA,AAAaA,+EAMX,WAASqC;AAAT,AAAA,aAAA,TAASA;AAAT,AAAa,OAASA;;;AANxB,CAAA,AAAA,iEAAAtF,jEAAaiD;;AAAb,CAAA,AAAA,AAAaA,6EAQX,WACIqC,GAAGzE;AADP,AAAA,aAAA,TACIyE;AADJ,AAEG,OAACG,gCAAQ,CAAMH,OAAGzE;;;AAVvB,CAAA,AAAA,AAAaoC,6EAQX,WAGIqC,GAAGzE,EAAEmF;AAHT,AAAA,aAAA,TAGIV;AAHJ,AAIG,GAAI,EAAK,CAAA,OAAMzE,QAAG,CAAGA,IAAE,AAASyE;AAC9B,OAACG,gCAAQ,CAAMH,OAAGzE;;AAClBmF;;;;AAdP,CAAA,AAAA,+DAAAhG,/DAAaiD;;AAAb,CAAA,AAAA,AAAaA,6EAgBX,WAASoE,IAAIC;AAAb,AAAA,cAAA,VAASD;AAAT,AAEE,IAAAL,mBAAI,CAAYK,YAAIC;AAApB,AAAA,GAAAN;AAAAA;;AACI,IAAAC,oBAAK,CAAY,AAACvE,gBAAM2E,aAAK,AAAC3E,gBAAM4E;AAApC,AAAA,GAAAL;AACK,OAACrG,+CAAO,WAAKX,EAAEY;AAAP,AACE,IAAAmG,uBAAI,AAACrG,6CAAE,AAAC4G,4CAAIF,QAAIxG,GAAG,AAAC0G,4CAAID,IAAIzG;AAA5B,AAAA,GAAAmG;AAAAA;;AACI,yBAAA,lBAACI;;GAFf,KAGa,AAACI,8CAAM,AAAC9E,gBAAM2E;;AAJhCJ;;;;;AAKR,AAAA,CAAA,AAAA,2DAAAjH,3DAAa4C;;AAAb,CAAA,AAAA,AAAaA,yEAEX,WAAS6E,GAAGC;AAAZ,AAAA,aAAA,TAASD;AAAT,AACE,QAAY,AAAaA,qBACb,EAAI,eAAW7E,dAAK8E,6CAClB,AAAaA,aACbA;;;AAClB,AAAA,CAAA,AAAA,6DAAA1H,7DAAakD;;AAAb,CAAA,AAAA,AAAaA,yEAEX,WAAOmD;AAAP,AAAA,eAAA,XAAOA;AAAP,AAAa,yDAAA,lDAACjB,mDAAc,AAACuC,cAAItB,UAAM,AAACsB,cAAItB;;;AAF9C,CAAA,AAAA,8DAAArG,9DAAakD;;AAAb,CAAA,AAAA,AAAaA,0EAIX,WAAOmD;AAAP,AAAA,eAAA,XAAOA;AAAP,AAAa,OAACzC,wCAAgByC;;;AAJhC,CAAA,AAAA,AAAanD,0EAKX,WAAOmD;AAAP,AAAA,eAAA,XAAOA;AAAP,AAAa,OAASA;;;AALxB,CAAA,AAAA,gEAAArG,hEAAakD;;AAAb,CAAA,AAAA,6DAAAlD,7DAAakD;;AAAb,CAAA,AAAA,AAAaA,2EAQX,WAASjD;AAAT,AAAA,YAAA,RAASA;AAAT,AAAA;;;AARF,CAAA,AAAA,6DAAAD,7DAAakD;;AAAb,CAAA,AAAA,AAAaA,yEAUX,WACImD,KAAKxF;AADT,AAAA,eAAA,XACIwF;AADJ,AACY,IAAAuB,WAAM/G;AAAN,AAAA,QAAA+G;KAAA;AACI,OAACD,cAAItB;;;KADT;AAEI,OAACwB,cAAIxB;;;;AAFT,MAAA,KAAA7G,MAAA,CAAA,mEAAAoI;;;;;AAXd,CAAA,AAAA,AAAa1E,yEAUX,WAIImD,KAAKxF,EAAEmF;AAJX,AAAA,eAAA,XAIIK;AAJJ,AAKG,IAAAyB,WAAMjH;AAAN,AAAA,QAAAiH;KAAA;AACI,OAAClE,wCAAgByC;;;KADrB;AAEI,OAASA;;;;AACXL;;;;;AAhIT,kDAAA,AAAA,uFAAA,AAAA,+FAAA,AAAA,8GAAA,AAAA,1OAiISpD,4FACGE,yGACKE,uGACJC","names":["clojure.data.xml.js.dom/doc","js/DOMParser","clojure.data.xml.js.dom/text-node","s","var_args","G__36786","clojure.data.xml.js.dom/element*","js/Error","tag","attrs","content","meta","el","clojure.data.xml.js.dom.element_STAR_","x36791","cljs.core/PROTOCOL_SENTINEL","_","x36797","cljs.core/clone","cljs.core/-with-meta","clojure.data.xml.name/qname-uri","clojure.data.xml.name/qname-local","cljs.core/reduce-kv","k","v","uri","cljs.core._EQ_","cljs.core.reduce","n","G__36809","clojure.data.xml.js.dom/element","args-arr__4839__auto__","len__4818__auto__","i__4819__auto__","argseq__4840__auto__","cljs.core/IndexedSeq","seq36806","G__36807","cljs.core/first","cljs.core/next","G__36808","self__4805__auto__","clojure.data.xml.js.dom/cdata","clojure.data.xml.js.dom/xml-comment","clojure.data.xml.js.dom/node-list","elements","f","seq__36813","cljs.core/seq","chunk__36814","count__36815","i__36816","temp__5753__auto__","cljs.core/chunked-seq?","c__4638__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/count","clojure.data.xml.js.dom/element-node","clojure.data.xml.js.dom/Text","cljs.core/type","clojure.data.xml.js.dom/Element","clojure.data.xml.js.dom.element","clojure.data.xml.js.dom/NamedNodeMap","clojure.data.xml.js.dom/NodeList","clojure.data.xml.js.dom/Attr","clojure.data.xml.js.dom/CData","clojure.data.xml.js.dom/Comment","clojure.data.xml.node/CData","clojure.data.xml.node/Comment","cljs.core/native-satisfies?","cljs.core/ILookup","cljs.core.map","cljs.core/ISequential","cljs.core.ex_info","clojure.data.xml.js.dom/dom-element-tag","clojure.data.xml.name.qname","clojure.data.xml.js.dom/xmlns-attr?","a","clojure.data.xml.name/xmlns-uri","clojure.data.xml.js.dom/remove-xmlns-attrs-xf","cljs.core.remove","clojure.data.xml.js.dom/remove-xmlns-attrs","cljs.core.partial","cljs.core/into","clojure.data.xml.js.dom/filter-xmlns-attrs-xf","cljs.core.filter","clojure.data.xml.js.dom/filter-xmlns-attrs","G__36834","clojure.data.xml.js.dom/dom-element-attrs","clojure.data.xml.js.dom.dom_element_attrs","xf","cljs.core.transduce","cljs.core.completing","ta","attr-node","cljs.core.assoc_BANG_","cljs.core/persistent!","cljs.core/transient","cljs.core.array_seq","clojure.data.xml.js.dom/node-list-vec","nl","cljs.core.into","clojure.data.xml.js.dom/element-data","clojure.data.xml.js.dom/as-node","clojure.data.xml.node/xml-comment","clojure.data.xml.node/cdata","clojure.data.xml.node.element_STAR_","clojure.data.xml.js.dom/extend-dom-as-data!","G__36838","cljs.core/Keyword","nf","G__36839","nm","el0","el1","attr","temp__5751__auto__","i","not-found","acc","init","G__36840","G__36841","G__36842","nm0","nm1","or__4212__auto__","and__4210__auto__","qn","cljs.core.get","cljs.core/reduced","nl0","nl1","cljs.core.nth","cljs.core.range","t0","t1","cljs.core/key","G__36843","cljs.core/val","G__36844"],"sourcesContent":["(ns clojure.data.xml.js.dom\n  (:require\n   [clojure.data.xml.name :refer [qname-uri qname-local qname xmlns-uri]]\n   [clojure.data.xml.node :as node]))\n\n(def doc\n  (.. (js/DOMParser.)\n      (parseFromString \"<d />\" \"text/xml\")))\n\n(defn text-node\n  \"Create a Text node\"\n  [s]\n  (.createTextNode doc s))\n\n(defn element*\n  \"Create an xml element from a content collection and optional metadata\"\n  ([tag attrs content meta]\n   (let [el (element* tag attrs content)]\n     (specify! el\n       IMeta\n       (-meta [_] meta)\n       IWithMeta\n       (-with-meta [_ meta]\n         (specify el\n           IMeta\n           (-meta [_] meta)\n           IWithMeta\n           (-with-meta [_ meta]\n             (-with-meta el meta)))))\n     el))\n  ([tag attrs content]\n   (let [el (.createElementNS doc (qname-uri tag) (qname-local tag))]\n     (reduce-kv (fn [_ k v]\n                  (let [uri (qname-uri k)]\n                    (if (= uri \"http://www.w3.org/2000/xmlns/\")\n                      (.setAttribute el (str \"xmlns:\" (qname-local k)) v)\n                      (.setAttributeNS el uri (qname-local k) v))))\n                nil attrs)\n     (reduce (fn [_ n]\n               (.appendChild el (if (string? n)\n                                  (text-node n)\n                                  n)))\n             nil content)\n     el)))\n\n(defn element\n  \"Create an xml Element from content varargs\"\n  ([tag] (element* tag nil nil))\n  ([tag attrs] (element* tag attrs nil))\n  ([tag attrs & content] (element* tag attrs content)))\n\n(defn cdata\n  \"Create a CData node\"\n  [content]\n  (.createCDATASection doc content))\n\n(defn xml-comment\n  \"Create a Comment node\"\n  [content]\n  (.createComment doc content))\n\n(declare element-node)\n\n(defn node-list\n  \"Create a NodeList\"\n  [elements]\n  (let [f (.createDocumentFragment doc)]\n    (doseq [el elements]\n      (.appendChild f (element-node el)))\n    (.-childNodes f)))\n\n;; ## Types\n\n;; we get these from reflection, to only depend only on js/DOMParser and js/XMLSerializer\n;; these can easily be provided in nashorn, ...\n\n(def Text (type (text-node \"\")))\n(def Element (type (element :e)))\n(def NamedNodeMap (type (.-attributes (element :e))))\n(def NodeList (type (node-list [])))\n(def Attr (type (aget (.-attributes (element :e {:a \"1\"})) 0)))\n(def CData (type (cdata \"\")))\n(def Comment (type (xml-comment \"\")))\n\n;; ## Coercions\n\n;; ## -> DOM\n\n(defn element-node\n  \"Coerce xml elements to dom nodes\"\n  [el]\n  (cond\n    (string? el) (text-node el)\n    (instance? node/CData el) (cdata (:content el))\n    (instance? node/Comment el) (xml-comment (:content el))\n    (instance? Element el) el\n    (instance? CData el) el\n    (instance? Comment el) el\n    ;; stupid xmldom, (some? (.-item el))\n    #_(instance? NodeList el)\n    (some? (.-item el)) el\n    (instance? Text el) el\n    (satisfies? ILookup el) (element* (:tag el)\n                                      (:attrs el)\n                                      (map element-node (:content el)))\n    (satisfies? ISequential el) (node-list el)\n    :else (throw (ex-info \"Cannot coerce\" {:form el}))))\n\n;; ## -> DATA\n\n(defn- dom-element-tag [el]\n  (qname (.-namespaceURI el)\n         (.-localName el)))\n\n(defn- xmlns-attr? [a]\n  (identical? xmlns-uri (.-namespaceURI a)))\n(def remove-xmlns-attrs-xf (remove xmlns-attr?))\n(def remove-xmlns-attrs (partial into {} remove-xmlns-attrs-xf))\n(def filter-xmlns-attrs-xf (filter xmlns-attr?))\n(def filter-xmlns-attrs (partial into {} filter-xmlns-attrs-xf))\n\n(defn dom-element-attrs\n  ([el] (dom-element-attrs remove-xmlns-attrs-xf el))\n  ([xf el]\n   (transduce\n    xf\n    (completing\n     (fn [ta attr-node]\n       (assoc! ta\n               (dom-element-tag attr-node)\n               (.-value attr-node)))\n     persistent!)\n    (transient {})\n    (array-seq el))))\n\n(declare element-data)\n\n(defn- node-list-vec [nl]\n  (into [] (map element-data) (array-seq nl)))\n\n(defn- as-node [n]\n  (if (instance? Text n)\n    (.-nodeValue n) ;; .-data\n    n))\n\n(defn element-data\n  \"Coerce xml elements to element maps / content vectors\"\n  [el]\n  (cond\n    (instance? Comment el)\n    (node/xml-comment (.-data el))\n    (instance? CData el)\n    (node/cdata (.-data el))\n    (instance? Text el)\n    (.-nodeValue el)\n    (instance? Element el)\n    (node/element* (dom-element-tag el)\n                   (dom-element-attrs (.-attributes el))\n                   (node-list-vec (.-childNodes el))\n                   {:clojure.data.xml/nss (dom-element-attrs\n                                           filter-xmlns-attrs-xf\n                                           (.-attributes el))})\n    ;;(instance? NamedNodeMap el)\n    (.-getNamedItemNS el)\n    (dom-element-attrs el)\n    (instance? NodeList el) (node-list-vec el)\n    (string? el) el\n    (satisfies? ILookup el) el\n    (satisfies? ISequential el) el\n    :else (throw (ex-info \"Element cannot be converted to data\" {:element el}))))\n\n(defn extend-dom-as-data! []\n  (extend-type Element\n    IMap\n    IMeta\n    (-meta [el]\n      {:clojure.data.xml/nss (filter-xmlns-attrs\n                              (.-attributes el))})\n    ILookup\n    (-lookup\n      ([el k]\n       (case k\n         :tag (dom-element-tag el)\n         :attrs (.-attributes el)\n         :content (.-childNodes el)\n         (throw (ex-info \"XML tag has no key\" {:key k :el el}))))\n      ([el k nf]\n       #_(println \"Element\" k \"=>\" (case k\n                                     :tag (dom-element-tag el)\n                                     :attrs (.-attributes el)\n                                     :content (.-childNodes el)\n                                     nf))\n       (case k\n         :tag (dom-element-tag el)\n         :attrs (remove-xmlns-attrs (.-attributes el))\n         :content (.-childNodes el)\n         nf)))\n    ICounted\n    (-count [nm] 3)\n    IEquiv\n    (-equiv [el0 el1]\n      (if false #_(instance? Element el1)\n          (do\n            ;; we can't use .isEqualNode, since that has bugs with namespaces\n            (.log js/console el0 el1)\n            (println 'isEqualNode (.isEqualNode el0 el1))\n            (.isEqualNode el0 el1))\n          (and (= (:tag el0) (:tag el1))\n               (= (:attrs el0) (:attrs el1))\n               (= (:content el0) (:content el1))))))\n  (extend-type NamedNodeMap\n    IMap\n    ISeqable\n    (-seq [nm] (array-seq nm))\n    ILookup\n    (-lookup\n      ([attrs attr]\n       (if-let [i (.getNamedItemNS attrs (qname-uri attr) (qname-local attr))]\n         (.-value i)\n         nil))\n      ([attrs attr not-found]\n       #_(println \"Attrs\" attr \"=>\" (if-let [i (.getNamedItemNS attrs (qname-uri attr) (qname-local attr))]\n                                      (.-value i)\n                                      not-found))\n       (if-let [i (.getNamedItemNS attrs (qname-uri attr) (qname-local attr))]\n         (.-value i)\n         not-found)))\n    ICounted\n    (-count [nm] (reduce (fn [acc attr]\n                           (if (xmlns-attr? attr)\n                             acc\n                             (inc acc)))\n                         0 nm))\n    IKVReduce\n    (-kv-reduce [nm f init]\n      (reduce (fn [acc attr]\n                (if (xmlns-attr? attr)\n                  acc\n                  (f acc (dom-element-tag attr) (.-value attr))))\n              init nm))\n    IEquiv\n    (-equiv [nm0 nm1]\n      #_(println \"NamedNodeMap.-equiv\" (identical? nm0 nm1) (count nm0) (count nm1))\n      (or (identical? nm0 nm1)\n          (and (identical? (count nm0) (count nm1))\n               (reduce-kv (fn [_ qn v]\n                            #_(println \"=\" v 'qn qn '(get nm1 qn \"\") (get nm1 qn \"\"))\n                            (or (identical? v (get nm1 qn \"\"))\n                                (reduced false)))\n                          true nm0)))))\n  (extend-type NodeList\n                                        ;specify! (.. (node-list []) -constructor -prototype)\n    ISeqable\n    (-seq [nl] (seq (map as-node (array-seq nl))))\n    ISequential\n    ICounted\n    (-count [nl] (alength nl))\n    IIndexed\n    (-nth\n      ([nl n]\n       (as-node (aget nl n)))\n      ([nl n nf]\n       (if (and (<= 0 n) (< n (alength nl)))\n         (as-node (aget nl n))\n         nf)))\n    IEquiv\n    (-equiv [nl0 nl1]\n      #_(println \"NodeList.-equiv\")\n      (or (identical? nl0 nl1)\n          (and (identical? (count nl0) (count nl1))\n               (reduce (fn [_ n]\n                         (or (= (nth nl0 n) (nth nl1 n))\n                             (reduced false)))\n                       true (range (count nl0)))))))\n  (extend-type Text\n    IEquiv\n    (-equiv [t0 t1]\n      (identical? (.-nodeValue t0)\n                  (if (instance? Text t1)\n                    (.-nodeValue t1)\n                    t1))))\n  (extend-type Attr\n    ISeqable\n    (-seq [attr] (array-seq #js[(key attr) (key attr)]))\n    IMapEntry\n    (-key [attr] (dom-element-tag attr))\n    (-val [attr] (.-value attr))\n    ISequential\n    ICounted\n    (-count [_] 2)\n    IIndexed\n    (-nth\n      ([attr n] (case n\n                  0 (key attr)\n                  1 (val attr)))\n      ([attr n nf]\n       (case n\n         0 (dom-element-tag attr)\n         1 (.-value attr)\n         nf))))\n  {'Text Text\n   'Element Element\n   'NamedNodeMap NamedNodeMap\n   'NodeList NodeList})\n"]}