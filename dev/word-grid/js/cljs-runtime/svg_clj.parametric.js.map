{"version":3,"sources":["svg_clj/parametric.cljc"],"mappings":"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","names":["svg-clj.parametric/check-parametric","f","vec__37428","cljs.core.nth","fdata","e37431","e","f0","f05","f1","cljs.core.map","t0","cljs.core/seqable?","t05","t1","dim","cljs.core/count","required","keys-pred","p1__37427#","cljs.core/every?","cljs.core/contains?","t0-pred","and__4210__auto__","cljs.core._EQ_","cljs.core/number?","t1-pred","missing","cljs.core.remove","cljs.core/set","cljs.core/keys","result","G__37432","cljs.core/assoc-in","cljs.core/not","svg-clj.parametric/valid-parametric?","p__37439","vec__37440","svg-clj.parametric/remap-within","start","end","x","step","t","var_args","G__37449","svg-clj.parametric/arc-length","js/Error","curve","svg_clj.parametric.arc_length","ta","tb","seg","cljs.core.range","cljs.core.partition","p1__37443#","cljs.core.apply","svg-clj.utils/distance","cljs.core.reduce","cljs.core/+","p1__37444#","svg_clj.utils.round","svg-clj.parametric/regular-polygon-pts","r","n","angle","Math/PI","p1__37452#","cljs.core/PersistentVector","Math/cos","Math/sin","svg-clj.parametric/rect-grid","nx","ny","w","h","iter__4611__auto__","s__37454","cljs.core/LazySeq","temp__5753__auto__","cljs.core/seq","xs__6308__auto__","cljs.core/first","iterys__4607__auto__","s__37456","cljs.core/chunked-seq?","c__4609__auto__","size__4610__auto__","b__37458","cljs.core/chunk-buffer","i__37457","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__37455","cljs.core/chunk-rest","cljs.core/cons","cljs.core/rest","fs__4608__auto__","cljs.core.concat","iter__37453","a","b","svg-clj.parametric/hex-grid","a-offset","s__37460","s__37462","b__37464","i__37463","iter__37461","iter__37459","y","Math/floor","s__37466","s__37468","b__37470","i__37469","iter__37467","iter__37465","Math/ceil","svg-clj.parametric/line","svg-clj.utils/centroid-of-pts","svg-clj.utils/v+","svg-clj.utils/v*","svg-clj.utils/v-","cljs.core.repeat","p__37471","p__37472","vec__37473","vec__37476","svg-clj.parametric/fastline","ax","ay","bx","by","vec__37479","vx","vy","svg-clj.parametric/polyline","pts","lines","cljs.core.partial","cljs.core/apply","length","p1__37482#","intervals","p1__37483#","cljs.core.reductions","p1__37484#","cljs.core.mapv","cljs.core/second","cljs.core/last","cljs.core.filter","cljs.core/some?","p1__37485#","p2__37486#","svg-clj.parametric/polygon","cljs.core/vec","p1__37487#","p1__37488#","p1__37489#","p1__37490#","p1__37491#","p2__37492#","svg-clj.parametric/radius-from-pts","p1","p2","p3","c","s","sa","sb","sc","rt","Math/sqrt","radius","svg-clj.parametric/center-from-pts","vec__37493","vec__37496","u1","u2","w1","svg-clj.utils/cross*","u","svg-clj.utils/normalize","v","_","svg-clj.utils/dot*","cx","cy","Math/pow","G__37502","svg-clj.parametric/circle","vec__37503","p1__37499#","cljs.core.conj","svg_clj.utils.normal","cp","cljs.core.drop_last","p1__37500#","svg-clj.parametric/arc","vec__37507","p1__37506#","svg_clj.parametric.circle","svg-clj.utils/angle-from-pts","svg-clj.parametric/ellipse-perimeter","rx","ry","svg-clj.parametric/ellipse","svg-clj.parametric/quadratic-bezier","l1","l2","l3","svg-clj.parametric/bezier*","p1__37510#","npts","p1__37511#","fexpr__37512","svg-clj.parametric/bezier","svg-clj.parametric/next-pascal","row","p1__37513#","svg-clj.parametric/binomial","i","pascal-tri-row","cljs.core.take","cljs.core/iterate","cljs.core.get","svg-clj.parametric/polynomial","svg-clj.parametric/half-bezier","ws","poly","bi","cljs.core.map_indexed","svg-clj.parametric/rational-bezier*","wts","xs","p1__37514#","p2__37515#","ys","p1__37516#","p2__37517#","dn","svg-clj.parametric/rational-bezier","G__37521","svg-clj.parametric/split-bezier","p__37522","map__37523","cljs.core/--destructure-map","svg_clj.parametric.split_bezier","cs","p1__37518#","p1__37519#","cljs.core/reverse","svg-clj.parametric/t-from-curve-distance","d","eps","l","guess","itr","p__37526","vec__37527","t-guess","d-guess","p1__37524#","cljs.core.take_while","Math/abs","cljs.core/-","p1__37525#","svg-clj.parametric/split-bezier-between","da","split1","curve1","partial-result","ta1","cljs.core.merge","G__37532","svg-clj.parametric/multi-split-bezier","ts","ds","p1__37530#","cljs.core.sort","svg_clj.parametric.multi_split_bezier","acc","map__37533","remapped-t","map__37534","svg-clj.parametric/uniform-split-bezier","n-segments","svg-clj.parametric/sinwave","amp","freq","G__37536","svg-clj.parametric/blend","fa","fb","alpha","line","easefn","svg-clj.parametric/eased-polyline","p1__37537#","p1__37538#","p1__37539#","easedlines","p1__37540#","G__37543","p1__37541#","p2__37542#","G__37547","svg-clj.parametric/multiblend","fs","p1__37544#","p1__37545#","svg-clj.parametric/fn-offset","G__37548","G__37549","tpt","G__37551","svg-clj.parametric/shift-pts","cljs.core.sort_by","cljs.core.juxt","svg_clj.parametric.shift_pts","vec__37552","back","front","cljs.core/split-with","cljs.core/complement","svg-clj.parametric/simplify","p1__37555#","svg-clj.parametric/remove-colinears","svg-clj.algorithms/remove-colinears","svg-clj.parametric/pline","vec__37556","map__37559","x1","y1","x2","y2","G__37560","G__37561","svg-clj.parametric/stroke-pts","width","of","tcurve","bcurve","p1__37562#","p1__37563#","svg-clj.parametric/fillet-pts","fillet","ipts","svg-clj.utils/offset-pts","pt","p1__37571#","cljs.core.mapcat","svg_clj.algorithms.hull","svg-clj.parametric/chamfer-pts","p1__37572#","p1__37573#","cljs.core/concat","p__37574","vec__37575","svg-clj.parametric/translate","data","svg-clj.parametric/rotate","deg","ctr","svg-clj.utils/rotate-pt-around-center","p__37578","vec__37579","svg-clj.parametric/scale","sx","sy","svg-clj.utils/scale-pt-from-center","cljs.core/chunk-first"],"sourcesContent":["(ns svg-clj.parametric\n  \"Provides functions that generate lists of points or return parametric curve functions.\"\n  (:require [svg-clj.utils :as utils]\n            [svg-clj.algorithms :as alg]))\n\n(defn check-parametric\n  [f]\n  (let [fdata (try (f) (catch #?(:cljs :default :clj Exception) e))\n        [f0 f05 f1] (map f [0 0.5 1])\n        t0 (if (seqable? f0) f0 [f0])\n        t05 (if (seqable? f05) f05 [f05])\n        t1 (if (seqable? f1) f1 [f1])\n        dim (count t05)\n        required [:fn :input :vertex-params :length :origin]\n        keys-pred (every? #(contains? fdata %) required)\n        t0-pred (and t0 (= (count t0) dim) (every? number? t0))\n        t1-pred (and t1 (= (count t1) dim) (every? number? t1))\n        missing (when-not keys-pred (remove (set (keys fdata)) (set required)))\n        result {:dimension dim\n                :data fdata\n                :valid-data keys-pred\n                :valid-t0 t0-pred\n                :valid-t1 t1-pred}]\n    (cond-> result\n      missing       (assoc-in [:error :missing] missing)\n      (not fdata)   (assoc-in [:error :invalid-0-arity] fdata)\n      (not t0-pred) (assoc-in [:error :invalid-t0] t0)\n      (not t1-pred) (assoc-in [:error :invalid-t1] t1))))\n\n(defn valid-parametric?\n  [f]\n  (nil? (:error (check-parametric f))))\n\n(defn- remap-within\n  [f [start end] x]\n  (when (and (>= x start) (< x end))\n    (let [step (- end start)\n          t (/ (- x start) step)]\n      (f t))))\n\n(defn arc-length\n  ([curve] (arc-length curve 0 1))\n  ([curve t] (arc-length curve 0 t))\n  ([curve ta tb]\n   (let [seg 13500\n         start (/ (* ta seg) seg)\n         end   (/ (inc (* tb seg)) seg)]\n     (->> (range start end (/ 1 seg))\n          (map curve)\n          (partition 2 1)\n          (map #(apply utils/distance %))\n          (reduce +)\n          (#(utils/round % 5))))))\n\n(defn regular-polygon-pts\n  [r n]\n  (let [angle (* 2 Math/PI (/ 1 n))]\n    (map #(vector (utils/round (* r (Math/cos (* % angle))) 5)\n                  (utils/round (* r (Math/sin (* % angle))) 5))\n         (range n))))\n\n(defn rect-grid\n  [nx ny w h]\n  (for [a (range nx)\n        b (range ny)]\n    [(* w a) (* h b)]))\n\n(defn hex-grid\n  [nx ny w]\n  (let [a-offset (/ w 2)\n        h (/ w 0.8660254)]\n    (concat\n     (for [x (range 0 nx)\n           y (range 0 (Math/floor (/ ny 2)))]\n       [(+ a-offset (* w x)) (* 2 h y)])\n     (for [x (range 0 nx)\n           y (range 1 (Math/ceil (/ ny 2)))]\n       [(* w x) (+ h (* 2 h y))]))))\n\n(defn line\n  [a b]\n  (fn\n    ([] {:fn `line\n         :input [a b]\n         :origin (utils/centroid-of-pts [a b])\n         :vertex-params [0 1]\n         :length (utils/distance a b)})\n    ([t]\n     (cond\n       (= (float t) 0.0) a\n       (= (float t) 1.0) b\n       :else\n       (utils/v+ a (utils/v* (utils/v- b a) (repeat t)))))))\n\n(defn fastline\n  [[ax ay :as a] [bx by :as b]]\n  (let [[vx vy] (utils/v- b a)]\n    (fn [t]\n      [(+ ax (* vx t))\n       (+ ay (* vy t))])))\n\n(defn polyline\n  [pts]\n  (let [step (/ 1.0 (dec (count pts)))\n        lines (map (partial apply line) (partition 2 1 pts))\n        length (reduce + (map #(:length (%)) lines))\n        intervals (->> lines\n                       (map #(:length (%)))\n                       (reductions +)\n                       (concat [0])\n                       (map #(/ % length))\n                       (partition 2 1))]\n    (fn\n      ([] {:fn `polyline\n           :input [pts]\n           :origin (utils/centroid-of-pts pts)\n           :vertex-params (concat [0] (mapv second intervals))\n           :length length})\n      ([t]\n       (cond\n         (= (float t) 0.0) (first pts)\n         (= (float t) 1.0) (last pts)\n         :else\n         (first\n          (filter some?\n                  (map #(remap-within %1 %2 t) lines intervals))))))))\n\n(defn polygon\n  [pts]\n  (let [pts (concat (vec pts) [(first pts)])\n        step (/ 1.0 (dec (count pts)))\n        lines (map (partial apply line) (partition 2 1 pts))\n        length (reduce + (map #(:length (%)) lines))\n        intervals (->> lines\n                       (map #(:length (%)))\n                       (reductions +)\n                       (concat [0])\n                       (map #(/ % length))\n                       (partition 2 1))]\n    (fn\n      ([] {:fn `polygon\n           :input [pts]\n           :origin (utils/centroid-of-pts pts)\n           :vertex-params (concat [0] (mapv second intervals))\n           :length (reduce + (map #(:length (%)) lines))})\n      ([t]\n       (cond\n         (= (float t) 0.0) (first pts)\n         (= (float t) 1.0) (last pts)\n         :else\n         (first\n          (filter some?\n                  (map #(remap-within %1 %2 t) lines intervals))))))))\n\n(defn- radius-from-pts\n  \"compute the radius of an arc defined by 3 points\"\n  [p1 p2 p3]\n  (let [a (utils/distance p3 p2)\n        b (utils/distance p3 p1)\n        c (utils/distance p2 p1)\n        s (/ (+ a b c) 2)\n        sa ( - s a)\n        sb ( - s b)\n        sc ( - s c)\n        rt (Math/sqrt ^double (* s sa sb sc))\n        radius (/ (/ (* a b c) 4) rt)]\n    radius))\n\n(defn- center-from-pts\n  \"compute the center point of an arc through 3 points\"\n  [p1 p2 p3]\n  (let [u1 (utils/v- p2 p1)\n        u2 (utils/v- p3 p1)\n        w1 (utils/cross* (utils/v- p3 p1) u1)\n        u (utils/normalize u1)\n        w (utils/normalize w1)\n        v (utils/cross* w u)\n        [bx _] [(utils/dot* u1 u) 0]\n        [cx cy] [(utils/dot* u2 u) (utils/dot* u2 v)]\n        h (/ (+ (Math/pow (- cx (/ bx 2)) 2) \n                (Math/pow cy 2)\n                (- (Math/pow (/ bx 2) 2))) \n             (* 2 cy))]\n    (utils/v+ p1\n              (utils/v* (repeat (/ bx 2)) u) \n              (utils/v* (repeat h) v))))\n\n(defn circle\n  ([r]\n   (fn\n     ([] {:fn `circle\n          :input [r]\n          :origin [0 0]\n          :vertex-params [0]\n          :length (* Math/PI 2 r)})\n     ([t]\n      (let [t (* 2 Math/PI t)\n            x (* r (Math/cos t))\n            y (* r (Math/sin t))]\n        [x y]))))\n\n  ([a b c]\n   (let [[a b c] (map #(conj % 0) [a b c])\n         n (utils/normalize (utils/normal a b c))\n         r (radius-from-pts a b c)\n         cp (center-from-pts a b c)\n         u (utils/normalize (utils/v- a cp))\n         v (utils/cross* n u)]\n     (fn\n       ([] {:fn `circle\n            :input [a b c]\n            :origin cp\n            :vertex-params [0]\n            :length (* Math/PI 2 r)\n            :radius r})\n       ([t]\n       (cond\n         (or (< t 0.0) (> t 1.0)) nil\n         (= (float t) 0.0) (vec (drop-last a))\n         (= (float t) 1.0) (vec (drop-last a))\n         :else\n         (let [t (* 2 Math/PI t)]\n           (mapv \n            #(utils/round % 5)\n            (drop-last \n             (utils/v+ cp\n                       (utils/v* (repeat (* r (Math/cos t))) u)\n                       (utils/v* (repeat (* r (Math/sin t))) v)))))))))))\n\n(defn arc\n  [a b c]\n  (let [[a b c] (map #(conj % 0) [a b c])\n        f (circle a b c)\n        cp (center-from-pts a b c)\n        angle (utils/angle-from-pts a cp c)\n        r (radius-from-pts a b c)]\n    (fn\n      ([] {:fn `arc\n           :input [a b c]\n           :origin cp\n           :vertex-params [0 1]\n           :length (* Math/PI 2 r (/ angle 360))\n           :radius r\n           :center cp})\n      ([t]\n       (let [t (* t (/ angle 360.0))]\n         (f t))))))\n\n;; https://www.mathsisfun.com/geometry/ellipse-perimeter.html\n;; uses 'Infinite Series 2' exact calc. using 4 terms.\n(defn- ellipse-perimeter\n  [rx ry]\n  (let [h (/ (Math/pow (- rx ry) 2)\n             (Math/pow (+ rx ry) 2))]\n    (* Math/PI (+ rx ry)\n       (+ 1\n          (* h (/ 1 4))\n          (* h h (/ 1 64))\n          (* h h h (/ 1 256))))))\n\n(defn ellipse\n  [rx ry]\n  (fn \n    ([] {:fn `ellipse\n         :input [rx ry]\n         :origin [0 0]\n         :vertex-params [0]\n         :length (ellipse-perimeter rx ry)})\n    ([t]\n     (let [t (* 2 Math/PI t)\n           x (* rx (Math/cos t))\n           y (* ry (Math/sin t))]\n       [x y]))))\n\n(defn- quadratic-bezier\n  [a b c]\n  (fn [t]\n    (let [l1 (fastline a b)\n          l2 (fastline b c)\n          l3 (fastline (l1 t) (l2 t))]\n      (l3 t))))\n\n(defn- bezier*\n  [pts]\n  (if (= 3 (count pts))\n    (apply quadratic-bezier pts)\n    (let [lines (map #(apply fastline %) (partition 2 1 pts))] \n      (fn\n        [t]\n        (let [npts (map #(% t) lines)]\n          ((bezier* npts) t))))))\n\n(defn bezier\n  [pts]\n  (let [curve (bezier* pts)\n        length (arc-length curve)]\n    (fn\n      ([] {:fn `bezier\n           :input [pts]\n           :origin (utils/centroid-of-pts pts)\n           :vertex-params [0 1]\n           :length length})\n      ([t] (curve t)))))\n\n(defn- next-pascal\n  [row]\n  (vec (concat [(first row)]\n          (mapv #(apply + %) (partition 2 1 row))\n          [(last row)])))\n\n(defn- binomial\n  [n i]\n  (let [pascal-tri-row (last (take (inc n) (iterate next-pascal [1])))]\n  (get pascal-tri-row i)))\n\n(defn- polynomial\n  [n i t]\n  (* (Math/pow (- 1 t) (- n i)) (Math/pow t i)))\n\n(defn- half-bezier\n  [ws t]\n  (let [n (dec (count ws))\n        poly (partial polynomial n)\n        bi (partial binomial n)]\n    (reduce + (map-indexed \n               (fn [i w]\n                 (* (bi i) (poly i t) w))\n               ws))))\n\n(defn rational-bezier*\n  [pts wts]\n  (let [xs (map #(* (first %1) %2) pts wts)\n        ys (map #(* (second %1) %2) pts wts)\n        dn (partial half-bezier wts)]\n    (fn [t]\n      [(/ (half-bezier xs t) (dn t)) \n       (/ (half-bezier ys t) (dn t))])))\n\n(defn rational-bezier\n  [pts wts]\n  (let [curve (rational-bezier* pts wts)\n        length (arc-length curve)]\n    (fn\n      ([] {:fn `rational-bezier\n           :input [pts wts]\n           :origin (utils/centroid-of-pts pts)\n           :vertex-params [0 1]\n           :length length})\n      ([t] (curve t)))))\n\n(defn split-bezier\n  \"Returns the Control Point 'de Casteljau Skeleton', used to derive split Bezier Curve Control Points.\"\n  ([curve t]\n   (let [pts (-> (curve) :input first)]\n     (split-bezier {:a [(first pts)]\n                    :b [(last pts)]} pts t)))\n \n  ([{:keys [a b]} pts t]\n   (let [cs (map #(apply line  %) (partition 2 1 pts))\n         npts (map #(% t) cs)]\n     (if (= 1 (count npts))\n       {:a (conj a (first npts))\n        :b (-> b\n               reverse\n               (conj (first npts))\n               vec)}\n       (recur {:a (conj a (first npts))\n               :b (conj b (last npts))} npts t)))))\n\n(defn- t-from-curve-distance\n  [curve d]\n  (let [eps 0.000001\n        l (arc-length curve)\n        guess (/ d l)\n        itr (fn [[#_t-prev _ t-guess]]\n              (let [d-guess (arc-length curve t-guess)]\n                [t-guess (+ t-guess (/ (- d d-guess) l))]))]\n    (->> (iterate itr [0 guess])\n         (take 25)\n         (take-while #(< eps (Math/abs (apply - %))))\n         last\n         last\n         (#(utils/round % 5)))))\n\n(defn split-bezier-between\n  [curve ta tb]\n  (let [da (arc-length curve ta)\n        split1 (split-bezier curve tb)\n        curve1 (bezier (:a split1))\n        partial-result {:c (:b split1)}\n        ta1 (t-from-curve-distance curve1 da)]\n    (merge (split-bezier curve1 ta1) partial-result)))\n\n(defn multi-split-bezier\n  ([curve ts]\n   (let [ds (map #(arc-length curve %) (sort ts))]\n     (multi-split-bezier [] curve (reverse ds))))\n  ([acc curve ds]\n   (if (< 1 (count ds))\n     (let [remapped-t (t-from-curve-distance curve (first ds)) \n           {:keys [a b]} (split-bezier curve remapped-t)]\n       (recur (conj acc b) (bezier a) (rest ds)))\n     (let [remapped-t (t-from-curve-distance curve (first ds)) \n           {:keys [a b]} (split-bezier curve remapped-t)]\n       (-> acc\n           (conj b)\n           (conj a)\n           reverse)))))\n\n(defn uniform-split-bezier\n  [curve n-segments]\n  (let [l (arc-length curve)\n        step (/ l n-segments)\n        ds (range step l step)]\n    (if (= 2 n-segments)\n      (split-bezier curve 0.5)\n      (multi-split-bezier [] curve (reverse (sort ds))))))\n\n#_(def test-spline\n  (let [degree 3\n        pts [[0 0] [5 5] [10 -5] [15 25] [20 -5] [25 5] [30 0]]\n        knots [1 2 3 4 5 6 7 8 9 10 11]]\n    (partial b-spline-inner [pts degree knots] [1 pts])))\n\n(defn sinwave\n  [amp freq]\n  (fn [t]\n    (* amp (Math/sin (* t freq Math/PI)))))\n\n(defn blend\n  ([fa fb alpha]\n   (fn [t]\n     (let [line (line (fa t) (fb t))]\n       (line alpha))))\n  ([fa fb easefn alpha]\n   (fn [t]\n     (let [line (line (fa t) (fb t))]\n       (line (easefn alpha))))))\n\n(defn eased-polyline\n  [pts easefn]\n  (let [step (/ 1.0 (dec (count pts)))\n        lines (map (partial apply line) (partition 2 1 pts))\n        length (reduce + (map #(:length (%)) lines))\n        intervals (->> lines\n                       (map #(:length (%)))\n                       (reductions +)\n                       (concat [0])\n                       (map #(/ % length))\n                       (partition 2 1))\n        easedlines (map #(fn [t] (% (easefn t))) lines)]\n    (fn\n      ([] {:fn `polyline\n           :input [pts]\n           :length length})\n      ([t]\n       (cond\n         (= (float t) 0.0) (first pts)\n         (= (float t) 1.0) (last pts)\n         :else\n         (first\n          (filter some?\n                  (map #(remap-within %1 %2 t) easedlines intervals))))))))\n\n(defn multiblend\n  ([fs alpha]\n   (fn [t]\n     (let [line (polyline (map #(% t) fs))]\n       (line alpha))))\n  ([fs easefn alpha]\n   (fn [t]\n     (let [line (eased-polyline (map #(% t) fs) easefn)]\n       (line alpha)))))\n\n(defn fn-offset\n  [curve f]\n  (let [eps 0.000001]\n    (fn [t]\n      (let [t (cond (<= (- 1 eps) t) (- 1 eps)\n                    (> eps t) eps\n                    :else t)\n            n (utils/normalize (utils/normal (curve (- t eps)) (curve (+ t eps))))\n            tpt (curve t)\n            l (line tpt (utils/v+ tpt n))]\n        (l (f t))))))\n\n(defn shift-pts\n  \"Shift a list of `pts` to begin at `start`, preserving order and cycling the list.\nIf no `start` is provided, pt with lowest x and y values is used.\"\n  ([pts]\n   (let [start (first (sort-by (juxt first second) pts))]\n     (shift-pts pts start)))\n  ([pts start]\n   (let [[back front] (split-with (complement #{start}) pts)]\n     (concat front back))))\n\n(defn simplify\n  \"Simplifies the list of `pts` by evenly stepping `n` times along the parametric curve produced by the original list.\nThis does not guarantee that input pts are preserved in the output.\"\n  [pts n]\n  (let [c (polygon pts)]\n    (mapv #(c (/ % (inc n))) (range n))))\n\n;; not certain if this is a great design idea yet\n(defn remove-colinears [pts] (alg/remove-colinears pts))\n\n(defn- pline\n  [line]\n  (let [[_ {:keys [x1 y1 x2 y2]}] line]\n    (line [x1 y1] [x2 y2])))\n\n(defn stroke-pts\n  [curve width n-segments]\n  (let [of (fn [_] (* 0.5 width))\n        tcurve (fn-offset curve #(* 0.5 width))\n        bcurve (fn-offset curve #(* -0.5 width))]\n    (concat [(curve 0)]\n            (map #(tcurve (/ % n-segments)) (range (inc n-segments)))\n            [(curve 1)]\n            (map #(bcurve (/ % n-segments)) (reverse (range (inc n-segments)))))))\n\n#_(defn tapered-stroke-pts\n  [curve width n-segments taper-t]\n  (let [taper-n (int (* n-segments taper-t))\n        taper (map #(ease-out-sin (/ % taper-n)) (range taper-n))\n        dist (concat taper (repeat (- n-segments (* 2 (count taper))) 1) (reverse taper))\n        tlns (->> (el/line [0 0] [0 (* 0.5 width)])\n                  (repeat (inc n-segments))\n                  (#(lo/distribute-on-curve % curve))\n                  (map pline))\n        blns (->> (el/line [0 0] [0 (* -0.5 width)])\n                  (repeat n-segments)\n                  (#(lo/distribute-on-curve % curve))\n                  (map pline))]\n    (concat [(curve 0)]\n            (map #(%1 (* 1 (- 1 %2))) tlns dist)\n            [(curve 1)]\n            (reverse (map #(%1 (* 1 (- 1 %2))) blns dist)))))\n\n(defn fillet-pts\n  [pts r]\n  (let [fillet (regular-polygon-pts r 50)\n        ipts (utils/offset-pts pts (- r))\n        f (fn [pt] (map #(utils/v+ pt %) fillet))\n        npts (mapcat f ipts)]\n    (alg/hull npts)))\n\n(defn chamfer-pts\n  [pts r]\n  (let [fillet (regular-polygon-pts r 50)\n        ipts (utils/offset-pts pts (- r))\n        f (fn [pt] (map #(utils/v+ pt %) fillet))\n        npts (mapcat f ipts)]\n    (->> (alg/hull npts)\n         (partition 2 1)\n         (sort-by #(apply utils/distance %))\n         reverse\n         (take (count pts))\n         (apply concat)\n         alg/hull)))\n\n(defn translate\n  [f [x y]]\n  (let [data (f)]\n    (fn\n      ([] (merge data\n                 {:fn `translate\n                  :origin (utils/v+ (:origin data) [x y])\n                  :input [f [x y]]}))\n      ([t]\n       (utils/v+ (f t) [x y])))))\n\n(defn rotate\n  [f deg]\n  (let [data (f)\n        ctr (:origin data)]\n    (fn\n      ([] {:fn `rotate\n           :input [f deg]})\n      ([t]\n       (utils/rotate-pt-around-center (f t) deg ctr)))))\n\n(defn scale\n  [f [sx sy]]\n  (let [data (f)\n        ctr (:origin data)]\n    (fn\n      ([] (merge data\n                 {:fn `scale\n                  :input [f [sx sy]]}))\n      ([t]\n       (utils/scale-pt-from-center (f t) [sx sy] ctr)))))\n"]}