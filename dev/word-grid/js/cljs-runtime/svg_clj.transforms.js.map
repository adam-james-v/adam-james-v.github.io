{"version":3,"sources":["svg_clj/transforms.cljc"],"mappings":"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","names":["svg-clj.transforms/style","elem","style-map","svg-clj.utils/style","js/svg-clj","js/svg-clj.transforms","js/svg-clj.transforms.centroid","method-table__4701__auto__","cljs.core.atom","prefer-table__4702__auto__","method-cache__4703__auto__","cached-hierarchy__4704__auto__","hierarchy__4705__auto__","cljs.core.get","fexpr__37914","cljs.core/MultiFn","cljs.core.symbol","svg-clj.transforms/centroid","element","cljs.core/Keyword","cljs.core/first","elems","svg-clj.utils/centroid-of-pts","cljs.core.into","cljs.core.map","p__37915","vec__37916","cljs.core.nth","_","props","p__37919","vec__37920","p__37925","vec__37926","a","p1__37923#","cljs.core.mapv","b","p1__37924#","p__37929","vec__37930","pts","svg-clj.utils/s->v","clojure.string.split","p__37933","vec__37934","p__37937","vec__37938","p__37941","vec__37942","p__37945","vec__37946","svg-clj.path/centroid","p__37949","vec__37950","seq__37951","cljs.core/seq","first__37952","cljs.core/next","content","js/svg-clj.transforms.bounds","fexpr__37954","svg-clj.transforms/bounds","svg-clj.utils/bounds-of-pts","cljs.core.mapcat","p__37956","vec__37957","c","r","p1__37955#","svg-clj.utils/v+","p__37965","vec__37966","xf","svg-clj.utils/str->xf-map","deg","cljs.core.get_in","mx","my","rx","ry","p1__37960#","bb","obb","p1__37961#","svg-clj.utils/rotate-pt-around-center","xpts","p1__37962#","small-bb","large-bb","p1__37963#","p2__37964#","p__37971","vec__37972","p1__37969#","p1__37970#","p__37975","vec__37976","p__37979","vec__37980","p__37984","vec__37985","x","y","w","h","p1__37983#","p__37989","vec__37990","p1__37988#","p__37994","vec__37995","map__37998","cljs.core/--destructure-map","font-size","text","ar","cljs.reader.read_string","hh","hw","cljs.core/count","p1__37993#","svg-clj.path/bounds","p__37999","vec__38000","seq__38001","first__38002","svg-clj.transforms/bb-dims","vec__38003","vec__38006","vec__38009","xmin","ymin","xmax","ymax","svg-clj.transforms/get-props","cljs.core.merge","js/svg-clj.transforms.translate","fexpr__38012","svg-clj.transforms/translate","p__38014","vec__38015","p1__38013#","p__38020","p__38021","vec__38023","vec__38026","k","cx","cy","new-xf","cljs.core/assoc-in","new-props","cljs.core.assoc","svg-clj.utils/xf-map->str","cljs.core.update","cljs.core/+","p__38029","p__38030","vec__38031","vec__38034","p__38037","p__38038","vec__38039","vec__38042","p__38045","p__38046","vec__38047","vec__38050","cljs.core.partial","svg-clj.utils/v->s","clojure.string.join","p__38053","p__38054","vec__38055","vec__38058","p__38064","p__38065","vec__38066","vec__38069","vec__38072","p__38075","p__38076","vec__38077","vec__38080","vec__38083","p__38086","p__38087","vec__38088","vec__38091","cljs.core.update_in","p__38094","vec__38095","svg-clj.path/translate","p__38099","p__38100","vec__38101","seq__38102","first__38103","vec__38104","p1__38098#","cljs.core.filter","cljs.core/complement","cljs.core/nil?","p__38107","vec__38108","svg-clj.transforms/rotate-element-by-transform","cljs.core/vec","js/svg-clj.transforms.rotate","fexpr__38111","svg-clj.transforms/rotate","p1__38112#","p__38113","vec__38114","p__38117","vec__38118","p__38124","vec__38125","vec__38128","vec__38131","vec__38134","x1","y1","x2","y2","p1__38121#","svg-clj.utils/v-","p1__38122#","svg-clj.utils/rotate-pt","p1__38123#","p__38140","vec__38141","ctr","p1__38137#","p1__38138#","p1__38139#","xprops","p__38147","vec__38148","p1__38144#","p1__38145#","p1__38146#","p__38151","vec__38152","vec__38155","p__38158","vec__38159","vec__38162","p__38165","vec__38166","svg-clj.path/rotate","p__38169","vec__38170","seq__38171","first__38172","vec__38173","gcx","gcy","xfcontent","iter__4611__auto__","s__38177","cljs.core/LazySeq","temp__5753__auto__","cljs.core/chunked-seq?","c__4609__auto__","size__4610__auto__","b__38179","cljs.core/chunk-buffer","i__38178","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__38176","cljs.core/chunk-rest","cljs.core/cons","cljs.core/rest","child","ch","cljs.core._EQ_","xfm","svg-clj.utils/v*","p__38181","p__38182","vec__38183","seq__38184","first__38185","vec__38186","svg-clj.transforms/scale-by-transform","sx","sy","p1__38180#","cljs.core.fnil","cljs.core/*","js/svg-clj.transforms.scale","fexpr__38189","svg-clj.transforms/scale","p__38191","vec__38192","p1__38190#","p__38196","p__38197","vec__38198","vec__38201","vec__38204","p1__38195#","Math/abs","circle?","cljs.core.dissoc","p__38210","p__38211","vec__38212","vec__38215","vec__38218","p1__38207#","p1__38208#","p1__38209#","p__38225","p__38226","vec__38227","vec__38230","vec__38233","p1__38221#","p1__38222#","p1__38223#","p1__38224#","p__38237","p__38238","vec__38239","vec__38242","cljs.core.partition","p1__38236#","svg-clj.utils/scale-pt-from-center","p__38246","p__38247","vec__38248","vec__38251","p1__38245#","p__38256","p__38257","vec__38258","vec__38261","p1__38254#","p1__38255#","p__38266","p__38267","vec__38268","vec__38271","p1__38264#","p1__38265#","p__38275","p__38276","vec__38277","vec__38280","p1__38274#","p__38283","vec__38284","svg-clj.path/scale","p__38288","p__38289","vec__38290","seq__38291","first__38292","vec__38293","g-ctr","s__38297","b__38299","i__38298","iter__38296","elem-ctr","elem-v","js/svg-clj.transforms.offset","fexpr__38300","svg-clj.transforms/offset","p__38301","vec__38302","cljs.core.println","d","p1__38305#","p__38306","vec__38307","p__38310","vec__38311","p__38314","vec__38315","cljs.core/-","p__38318","vec__38319","map__38322","vec__38323","vec__38326","vec__38329","nx1","ny1","nx2","ny2","svg-clj.utils/offset-edge","p__38332","vec__38333","map__38336","points","opts","svg-clj.utils/offset-pts","npoints","p__38337","vec__38338","map__38341","cljs.core/chunk-first"],"sourcesContent":["(ns svg-clj.transforms\n  \"Provides functions for computing and transforming properties of the SVG elements created by the `elements`, `path`, and `composites` namespaces.\n\n  The most common transformations include translate, rotate, style, and scale which all work on every element. Other transformations include merge, split, and explode and these only work on path elements.\n\n  This namespace also provides `bounds`, and `centroid` functions which calculate the respective property for all elements provided by this library.\"\n  (:require [clojure.string :as str]   \n            [svg-clj.utils :as utils]\n            [svg-clj.elements :as el]\n            [svg-clj.path :as path]\n            #?(:cljs\n               [cljs.reader :refer [read-string]])))\n\n(defn style\n  [elem style-map]\n  (utils/style elem style-map))\n\n(defmulti centroid\n  (fn [element]\n    (if (keyword? (first element))\n      (first element)\n      :list)))\n\n(defmethod centroid :list\n  [elems]\n  (utils/centroid-of-pts (into #{} (map centroid elems))))\n\n(defmethod centroid :circle\n  [[_ props]]\n  [(:cx props) (:cy props)])  \n\n(defmethod centroid :ellipse\n  [[_ props]]\n  [(:cx props) (:cy props)])\n\n(defmethod centroid :line\n  [[_ props]]\n  (let [a (mapv #(get props %) [:x1 :y1])\n        b (mapv #(get props %) [:x2 :y2])]\n    (utils/centroid-of-pts [a b])))\n\n(defmethod centroid :polygon\n  [[_ props]]\n  (let [pts (mapv utils/s->v (str/split (:points props) #\" \"))]\n    (utils/centroid-of-pts pts)))\n\n(defmethod centroid :polyline\n  [[_ props]]\n  (let [pts (mapv utils/s->v (str/split (:points props) #\" \"))]\n    (utils/centroid-of-pts pts)))\n\n(defmethod centroid :rect\n  [[_ props]]\n  [(+ (:x props) (/ (:width  props) 2.0))\n   (+ (:y props) (/ (:height props) 2.0))])\n\n(defmethod centroid :image\n  [[_ props]]\n  [(+ (:x props) (/ (:width  props) 2.0))\n   (+ (:y props) (/ (:height props) 2.0))])\n\n;; this is not done yet. Text in general needs a redo.\n(defmethod centroid :text\n  [[_ props _]]\n  [(:x props) (:y props)])\n\n(defmethod centroid :path\n  [elem]\n  (path/centroid elem))\n\n(declare centroid)\n(defmethod centroid :g\n  [[_ _ & content]]\n  (utils/centroid-of-pts (into #{} (map centroid content))))\n\n(defmulti bounds\n  \"Calculates the axis-aligned-bounding-box of `element` or list of elements.\"\n  (fn [element]\n    (if (keyword? (first element))\n      (first element)\n      :list)))\n\n(defmethod bounds :default\n  [_]\n  [[-1 -1] [1 -1] [1 1] [-1 1]])\n\n(defmethod bounds :list\n  [elems]\n  (utils/bounds-of-pts (mapcat bounds elems)))\n\n(defmethod bounds :circle\n  [[_ props]]\n  (let [c [(:cx props) (:cy props)]\n        r (:r props)\n        pts (mapv #(utils/v+ c %) [[r 0]\n                             [0 r]\n                             [(- r) 0]\n                             [0 (- r)]])]\n    (utils/bounds-of-pts pts)))\n\n(defmethod bounds :ellipse\n  [[_ props]]\n  (let [xf (utils/str->xf-map  (get props :transform \"rotate(0 0 0)\"))\n        deg (get-in xf [:rotate 0])\n        mx (get-in xf [:rotate 1])\n        my (get-in xf [:rotate 2])\n        c [(:cx props) (:cy props)]\n        rx (:rx props)\n        ry (:ry props)\n        pts (mapv #(utils/v+ c %) [[rx 0]\n                                   [0 ry] \n                                   [(- rx) 0]\n                                   [0 (- ry)]])\n        bb (utils/bounds-of-pts pts)\n        obb (mapv #(utils/rotate-pt-around-center % deg [mx my]) bb)\n        xpts (mapv #(utils/rotate-pt-around-center % deg [mx my]) pts)\n        small-bb (utils/bounds-of-pts xpts)\n        large-bb (utils/bounds-of-pts obb)]\n    ;; not accurate, but good enough for now\n    ;; take the bb to be the average between the small and large\n    (utils/bounds-of-pts (mapv #(utils/centroid-of-pts [%1 %2]) small-bb large-bb))))\n\n(defmethod bounds :line\n  [[_ props]]\n  (let [a (mapv #(get props %) [:x1 :y1])\n        b (mapv #(get props %) [:x2 :y2])]\n    (utils/bounds-of-pts [a b])))\n\n(defmethod bounds :polygon\n  [[_ props]]\n  (let [pts (mapv utils/s->v (str/split (:points props) #\" \"))]\n    (utils/bounds-of-pts pts)))\n\n(defmethod bounds :polyline\n  [[_ props]]\n  (let [pts (mapv utils/s->v (str/split (:points props) #\" \"))]\n    (utils/bounds-of-pts pts)))\n\n(defmethod bounds :rect\n  [[_ props]]\n  (let [xf (utils/str->xf-map (get props :transform \"rotate(0 0 0)\"))\n        deg (get-in xf [:rotate 0])\n        mx (get-in xf [:rotate 1])\n        my (get-in xf [:rotate 2])\n        x (:x props)\n        y (:y props)\n        w (:width props)\n        h (:height props)\n        pts [[x y]\n             [(+ x w) y]\n             [(+ x w) (+ y h)]\n             [x (+ y h)]]\n        xpts (mapv #(utils/rotate-pt-around-center % deg [mx my]) pts)]\n    (utils/bounds-of-pts xpts)))\n\n(defmethod bounds :image\n  [[_ props]]\n  (let [xf (utils/str->xf-map (get props :transform \"rotate(0 0 0)\"))\n        deg (get-in xf [:rotate 0])\n        mx (get-in xf [:rotate 1])\n        my (get-in xf [:rotate 2])\n        x (:x props)\n        y (:y props)\n        w (:width props)\n        h (:height props)\n        pts [[x y]\n             [(+ x w) y]\n             [(+ x w) (+ y h)]\n             [x (+ y h)]]\n        xpts (mapv #(utils/rotate-pt-around-center % deg [mx my]) pts)]\n    (utils/bounds-of-pts xpts)))\n\n;; this is not done yet. Text in general needs a redo.\n;; Austin is a headless browser that may help with .getBBox???\n(defmethod bounds :text\n  [[_ {:keys [x y font-size ] :as props} text]]\n  (let [xf (utils/str->xf-map (get props :transform \"rotate(0 0 0)\"))\n        deg (get-in xf [:rotate 0])\n        ar 0.6\n        h (read-string (str font-size))\n        hh (/ h 2.0)\n        hw (/ (* ar h (count text)) 2.0)\n        pts [ [(- x hw) (- y hh)]\n             [(+ x hw) (- y hh)]\n             [(+ x hw) (+ y hh)]\n             [(- x hw) (+ y hh)] ]\n        xpts (mapv #(utils/rotate-pt-around-center % deg [x y]) pts)]\n    (utils/bounds-of-pts xpts)))\n\n(defmethod bounds :path\n  [elem]\n  (path/bounds elem))\n\n(declare bounds)\n(defmethod bounds :g\n  [[_ _ & content]]\n  (utils/bounds-of-pts (mapcat bounds content)))\n\n(defn bb-dims\n  [element]\n  (let [[[xmin ymin] _ [xmax ymax] _] (bounds element)]\n    [(- xmax xmin) (- ymax ymin)]))\n\n(defn- get-props\n  [props]\n  (merge {:rotate [0 0 0]} (utils/str->xf-map (get props :transform))))\n\n(defmulti translate\n  (fn [element _]\n    (if (keyword? (first element))\n      (first element)\n      :list)))\n\n(defmethod translate :list\n  [elems [x y]]\n  (map #(translate % [x y]) elems))\n\n(defmethod translate :circle\n  [[k props] [x y]]\n  (let [xf (get-props props)\n        cx (:cx props)\n        cy (:cy props)\n        new-xf (-> xf\n                   (assoc-in [:rotate 1] (+ x cx))\n                   (assoc-in [:rotate 2] (+ y cy)))\n        new-props (-> props\n                      (assoc :transform (utils/xf-map->str new-xf))\n                      (update :cx + x)\n                      (update :cy + y))]\n    [k new-props]))\n\n(defmethod translate :ellipse\n  [[k props] [x y]]\n  (let [xf (get-props props)\n        cx (:cx props)\n        cy (:cy props)\n        new-xf (-> xf\n                   (assoc-in [:rotate 1] (+ x cx))\n                   (assoc-in [:rotate 2] (+ y cy)))\n        new-props (-> props\n                      (assoc :transform (utils/xf-map->str new-xf))\n                      (update :cx + x)\n                      (update :cy + y))]\n    [k new-props]))\n\n(defmethod translate :line\n  [[k props] [x y]]\n  (let [new-props (-> props\n                      (update :x1 + x)\n                      (update :y1 + y)\n                      (update :x2 + x)\n                      (update :y2 + y))]\n    [k new-props]))\n\n(defmethod translate :polygon\n  [[k props] [x y]]\n  (let [pts (mapv utils/s->v (str/split (:points props) #\" \"))\n        xpts (->> pts\n                  (map (partial utils/v+ [x y]))\n                  (map utils/v->s))]\n    [k (assoc props :points (str/join \" \" xpts))]))\n\n(defmethod translate :polyline\n  [[k props] [x y]]\n  (let [pts (mapv utils/s->v (str/split (:points props) #\" \"))\n        xpts (->> pts \n                  (map (partial utils/v+ [x y]))\n                  (map utils/v->s))]\n    [k (assoc props :points (str/join \" \" xpts))]))\n\n(defmethod translate :rect\n  [[k props] [x y]]\n  (let [[cx cy] (centroid [k props])\n        xf (get-props props)\n        new-xf (-> xf\n                   (assoc-in [:rotate 1] (+ cx x))\n                   (assoc-in [:rotate 2] (+ cy y)))\n        new-props (-> props\n                      (assoc :transform (utils/xf-map->str new-xf))\n                      (update :x + x)\n                      (update :y + y))]\n    [k new-props]))\n\n(defmethod translate :image\n  [[k props] [x y]]\n  (let [[cx cy] (centroid [k props])\n        xf (get-props props)\n        new-xf (-> xf\n                   (assoc-in [:rotate 1] (+ cx x))\n                   (assoc-in [:rotate 2] (+ cy y)))\n        new-props (-> props\n                      (assoc :transform (utils/xf-map->str new-xf))\n                      (update :x + x)\n                      (update :y + y))]\n    [k new-props]))\n\n(defmethod translate :text\n  [[k props text] [x y]]\n  (let [xf (get-props props)\n        new-xf (-> xf\n                   (update-in [:rotate 1] + x)\n                   (update-in [:rotate 2] + y))\n        new-props (-> props\n                      (assoc :transform (utils/xf-map->str new-xf))\n                      (update :x + x)\n                      (update :y + y))]\n    [k new-props text]))\n\n(defmethod translate :path\n  [elem [x y]]\n  (path/translate elem [x y]))\n\n#_(declare translate)\n(defmethod translate :g\n  [[k props & content] [x y]]\n  (->> content\n       (map #(translate % [x y]))\n       (filter (complement nil?))\n       (into [k props])))\n\n(defn rotate-element-by-transform\n  \"Rotate an element by using the SVG transform property.\n  This function is used to transform elements that cannot 'bake' the transform into their other geometric properties. For example, the ellipse and circle elements have only center and radius properties which cannot affect orientation.\"\n  [[k props content] deg]\n  (let [xf (get-props props)\n        new-xf (-> xf\n                   (update-in [:rotate 0] + deg))\n        new-props (assoc props :transform (utils/xf-map->str new-xf))]\n    (vec (filter (complement nil?) [k new-props (when content content)]))))\n\n(defmulti rotate\n  (fn [element _]\n    (if (keyword? (first element))\n      (first element)\n      :list)))\n\n(defmethod rotate :list\n  [elems deg]\n  (map #(rotate % deg) elems))\n\n(defmethod rotate :circle\n  [[k props] deg]\n  (rotate-element-by-transform [k props] deg))\n\n(defmethod rotate :ellipse\n  [[k props] deg]\n  (rotate-element-by-transform [k props] deg))\n\n(defmethod rotate :line\n  [[k props] deg]\n  (let [pts [[(:x1 props) (:y1 props)] [(:x2 props) (:y2 props)]]\n        [[x1 y1] [x2 y2]]  (->> pts\n                                (map #(utils/v- % (utils/centroid-of-pts pts)))\n                                (map #(utils/rotate-pt % deg))\n                                (map #(utils/v+ % (utils/centroid-of-pts pts))))\n        new-props (assoc props :x1 x1 :y1 y1 :x2 x2 :y2 y2)]\n    [k new-props]))\n\n(defmethod rotate :polygon\n  [[k props] deg]\n  (let [ctr (centroid [k props])\n        pts (mapv utils/s->v (str/split (:points props) #\" \"))\n        xpts (->> pts\n                  (map #(utils/v- % ctr))\n                  (map #(utils/rotate-pt % deg))\n                  (map #(utils/v+ % ctr))\n                  (map utils/v->s))\n        xprops (assoc props :points (str/join \" \" xpts))]\n    [k xprops]))\n\n(defmethod rotate :polyline\n  [[k props] deg]\n  (let [ctr (centroid [k props])\n        pts (mapv utils/s->v (str/split (:points props) #\" \"))\n        xpts (->> pts\n                  (map #(utils/v- % ctr))\n                  (map #(utils/rotate-pt % deg))\n                  (map #(utils/v+ % ctr))\n                  (map utils/v->s))\n        xprops (assoc props :points (str/join \" \" xpts))]\n    [k xprops]))\n\n(defmethod rotate :rect\n  [[k props] deg]\n  (let [[cx cy] (centroid [k props])\n        xf (get-props props)\n        new-xf (-> xf\n                   (update-in [:rotate 0] + deg)\n                   (assoc-in  [:rotate 1] cx)\n                   (assoc-in  [:rotate 2] cy))\n        new-props (assoc props :transform (utils/xf-map->str new-xf))]\n    [k new-props]))\n\n(defmethod rotate :image\n  [[k props] deg]\n  (let [[cx cy] (centroid [k props])\n        xf (get-props props)\n        new-xf (-> xf\n                   (update-in [:rotate 0] + deg)\n                   (assoc-in  [:rotate 1] cx)\n                   (assoc-in  [:rotate 2] cy))\n        new-props (assoc props :transform (utils/xf-map->str new-xf))]\n    [k new-props]))\n\n(defmethod rotate :text\n  [[k props text] deg]\n  (rotate-element-by-transform [k props text] deg))\n\n(defmethod rotate :path\n  [elem deg]\n  (path/rotate elem deg))\n\n(defmethod rotate :g\n  [[k props & content :as elem] deg]\n  (let [[gcx gcy] (utils/centroid-of-pts (bounds elem))\n        xfcontent (for [child content]\n                    (let [ch (translate child [(- gcx) (- gcy)])\n                          ctr (if (= :g (first ch))\n                                (utils/centroid-of-pts (bounds ch))\n                                (centroid ch))\n                          xfm (-> ctr\n                                  (utils/rotate-pt deg)\n                                  (utils/v+ [gcx gcy]))]\n                      (-> ch\n                          (translate (utils/v* [-1 -1] ctr))\n                          (rotate deg)\n                          (translate xfm))))]\n    (into [k props] (filter (complement nil?) xfcontent))))\n\n(defn scale-by-transform\n  [[k props & content] [sx sy]]\n  (let [xf (utils/str->xf-map (:transform props))\n        new-xf (-> xf\n                   (update :scale (fnil #(map * [sx sy] %) [1 1])))\n        new-props (assoc props :transform (utils/xf-map->str new-xf))]\n    [k new-props] content))\n\n(defmulti scale\n  (fn [element _]\n    (if (keyword? (first element))\n      (first element)\n      :list)))\n\n(defmethod scale :list\n  [elems [sx sy]]\n  (map #(scale [sx sy] %) elems))\n\n;; transforms are applied directly to the properties of shapes.\n;; I have scale working the same way. One issue is that scaling a circle\n;; turns it into an ellipse. This impl WILL change the shape to ellipse if non-uniform scaling is applied.\n\n(defmethod scale :circle\n  [[_ props] [sx sy]]\n  (let [[sx sy] (map #(Math/abs %) [sx sy])\n        circle? (= sx sy)\n        r (:r props)\n        new-props (if circle?\n                    (assoc props :r (* r sx))\n                    (-> props\n                        (dissoc :r)\n                        (assoc :rx (* sx r))\n                        (assoc :ry (* sy r))))\n        k (if circle? :circle :ellipse)]\n    [k new-props]))\n\n(defmethod scale :ellipse\n  [[k props] [sx sy]]\n  (let [[sx sy] (map #(Math/abs %) [sx sy])\n        new-props (-> props\n                      (update :rx #(* sx %))\n                      (update :ry #(* sy %)))]\n    [k new-props]))\n\n;; find bounding box center\n;; translate bb-center to 0 0\n;; scale all x y values by * [sx sy]\n;; translate back to original bb-center\n\n(defmethod scale :line\n  [[k props :as elem] [sx sy]]\n  (let [[cx cy] (centroid elem)\n        new-props (-> props\n                      (update :x1 #(+ (* (- % cx) sx) cx))\n                      (update :y1 #(+ (* (- % cy) sy) cy))\n                      (update :x2 #(+ (* (- % cx) sx) cx))\n                      (update :y2 #(+ (* (- % cy) sy) cy)))]\n    [k new-props]))\n\n(defmethod scale :polygon\n  [[k props :as elem] [sx sy]]\n  (let [pts (map vec (partition 2 (utils/s->v (:points props))))\n        ctr (centroid elem)\n        xpts (->> pts\n                  (map #(utils/scale-pt-from-center % [sx sy] ctr))\n                  (map utils/v->s))]\n    [k (assoc props :points (str/join \" \" xpts))]))\n\n(defmethod scale :polyline\n  [[k props :as elem] [sx sy]]\n  (let [pts (map vec (partition 2 (utils/s->v (:points props))))\n        ctr (centroid elem)\n        xpts (->> pts\n                  (map #(utils/scale-pt-from-center % [sx sy] ctr))\n                  (map utils/v->s))]\n    [k (assoc props :points (str/join \" \" xpts))]))\n\n(defmethod scale :rect\n  [[k props] [sx sy]]\n  (let [cx (+ (:x props) (/ (:width props) 2.0))\n        cy (+ (:y props) (/ (:height props) 2.0))\n        w (* sx (:width props))\n        h (* sy (:height props))\n        new-props (-> props\n                      (assoc :width w)\n                      (assoc :height h)\n                      (update :x #(+ (* (- % cx) sx) cx))\n                      (update :y #(+ (* (- % cy) sy) cy)))]\n    [k new-props]))\n\n(defmethod scale :image\n  [[k props] [sx sy]]\n  (let [cx (+ (:x props) (/ (:width props) 2.0))\n        cy (+ (:y props) (/ (:height props) 2.0))\n        w (* sx (:width props))\n        h (* sy (:height props))\n        new-props (-> props\n                      (assoc :width w)\n                      (assoc :height h)\n                      (update :x #(+ (* (- % cx) sx) cx))\n                      (update :y #(+ (* (- % cy) sy) cy)))]\n    [k new-props]))\n\n(defmethod scale :text\n  [[k props text] [sx sy]]\n  (let [xf (get-props props)\n        cx (get-in xf [:rotate 1])\n        cy (get-in xf [:rotate 2])\n        x (+ (* (- (:x props) cx) sx) cx)\n        y (+ (* (- (:y props) cy) sy) cy)\n        new-xf (-> xf\n                   (assoc-in [:rotate 1] (- x))\n                   (assoc-in [:rotate 2] (- y)))\n        new-props (-> props\n                      (assoc :transform (utils/xf-map->str new-xf))\n                      (assoc :x x)\n                      (assoc :y y)\n                      (update-in [:style :font-size] #(* % sx)))]\n    [k new-props text]))\n\n(defmethod scale :path\n  [elem [sx sy]]\n  (path/scale elem [sx sy]))\n\n#_(defmethod scale :g\n  [[k props & content] [sx sy]]\n  (let [xf (utils/str->xf-map (:transform props))\n        new-xf (-> xf\n                   (update :scale (fnil #(map * [sx sy] %) [1 1])))\n        new-props (assoc props :transform (utils/xf-map->str new-xf))]\n    (into [k new-props] content)))\n\n(defmethod scale :g\n  [[k props & content :as elem] [sx sy]]\n  (let [g-ctr (utils/centroid-of-pts (bounds elem))\n        xfcontent (for [child content]\n                    (let [elem-ctr (if (= :g (first child))\n                                     (utils/centroid-of-pts (bounds child))\n                                     (centroid child))\n                          ch (-> child\n                                 (translate (utils/v* [-1 -1] elem-ctr))\n                                 (scale [sx sy]))\n                          elem-v (utils/v- elem-ctr g-ctr)]\n                      (-> ch (translate (utils/v+ (utils/v* [sx sy] elem-v) g-ctr)))))]\n    (into [k props] (filter (complement nil?) xfcontent))))\n\n(defmulti offset\n  (fn [element _]\n    (if (keyword? (first element))\n      (first element)\n      :list)))\n\n(defmethod offset :default\n  [[k _ :as elem]]\n  (println (str \"Offset not implemented for \" k \".\"))\n  elem)\n\n(defmethod offset :list\n  [elems d]\n  (map #(offset % d) elems))\n\n(defmethod offset :circle\n  [[k props] d]\n  (let [new-props (update props :r + d)]\n    [k new-props]))\n\n(defmethod offset :ellipse\n  [[k props] d]\n  (let [new-props (-> props\n                      (update :rx + d)\n                      (update :ry + d))]\n    [k new-props]))\n\n(defmethod offset :rect\n  [[k props] d]\n  (let [new-props (-> props\n                      (update :x - d)\n                      (update :y - d)\n                      (update :width + (* d 2))\n                      (update :height + (* d 2)))]\n    [k new-props]))\n\n(defmethod offset :line\n  [[k {:keys [x1 y1 x2 y2] :as props}] d]\n  (let [[[nx1 ny1] [nx2 ny2]] (utils/offset-edge [[x1 y1] [x2 y2]] d)\n        new-props (-> props\n                      (assoc :x1 nx1)\n                      (assoc :y1 ny1)\n                      (assoc :x2 nx2)\n                      (assoc :y2 ny2))]\n    [k new-props]))\n\n(defmethod offset :polygon\n  [[k {:keys [points] :as props}] d]\n  (let [pts (map vec (partition 2 (utils/s->v points)))\n        opts (utils/offset-pts pts d)\n        npoints (str/join \" \" (map utils/v->s opts))\n        new-props (assoc props :points npoints)]\n    [k new-props]))\n\n(defmethod offset :polyline\n  [[k {:keys [points] :as props}] d]\n  (let [pts (map vec (partition 2 (utils/s->v points)))\n        opts (utils/offset-pts pts d)\n        npoints (str/join \" \" (map utils/v->s opts))\n        new-props (assoc props :points npoints)]\n    [k new-props]))\n"]}