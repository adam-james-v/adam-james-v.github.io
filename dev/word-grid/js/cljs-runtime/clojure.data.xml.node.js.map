{"version":3,"sources":["clojure/data/xml/node.cljc"],"mappings":"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","names":["this__4450__auto__","writer__4451__auto__","opt__4452__auto__","cljs.core/-write","clojure.data.xml.node/Element","clojure.data.xml.node/->Element","tag","attrs","content","meta","_","this","cljs.core/hash-unordered-coll","other","js/cljs.core.equiv_map","cljs.core/RecordIter","cljs.core/nil-iter","qname","clojure.data.xml.name/as-qname","cljs.core.apply","cljs.core/str","cljs.core.concat","cljs.core.mapcat","p__36694","vec__36695","cljs.core.nth","n","a","cljs.core.pr_str","cljs.core/seq","k","nf","G__36698","cljs.core/Keyword","entry","cljs.core.conj","cljs.core/with-meta","v","G__36700","G__36699","next-meta","writer","opts","cljs.core/pr-writer","cljs.core/empty?","cljs.core/pr-sequential-writer","this__4461__auto__","k__4462__auto__","this__4463__auto__","k36709","else__4464__auto__","G__36713","cljs.core.get","__extmap","this__4481__auto__","f__4482__auto__","init__4483__auto__","cljs.core.reduce","ret__4484__auto__","p__36715","vec__36716","k__4485__auto__","v__4486__auto__","this__4476__auto__","writer__4477__auto__","opts__4478__auto__","pr-pair__4479__auto__","keyval__4480__auto__","cljs.core/PersistentVector","G__36708","cljs.core/-iterator","this__4459__auto__","__meta","this__4456__auto__","__hash","this__4465__auto__","cljs.core/count","this__4457__auto__","h__4319__auto__","coll__4458__auto__","this36710","other36711","cljs.core._EQ_","this__4471__auto__","k__4472__auto__","cljs.core/contains?","cljs.core.dissoc","cljs.core/-with-meta","cljs.core.into","cljs.core/not-empty","this__4468__auto__","G__36719","this__4469__auto__","k__4470__auto__","pred__36720","cljs.core/keyword-identical?","expr__36721","cljs.core.assoc","this__4474__auto__","cljs.core/MapEntry","this__4460__auto__","this__4466__auto__","entry__4467__auto__","cljs.core/vector?","cljs.core/-nth","cljs.core/-conj","clojure.data.xml.node/CData","this__4505__auto__","cljs.core/List","writer__4506__auto__","G__36712","extmap__4501__auto__","G__36723","cljs.core/record?","clojure.data.xml.node/->CData","clojure.data.xml.node/map->CData","k36725","G__36729","p__36730","vec__36731","G__36724","this36726","other36727","G__36734","pred__36735","expr__36736","clojure.data.xml.node/Comment","G__36728","G__36738","clojure.data.xml.node/->Comment","clojure.data.xml.node/map->Comment","var_args","G__36742","clojure.data.xml.node/element*","js/Error","or__4212__auto__","cljs.core.remove","cljs.core/nil?","G__36750","clojure.data.xml.node/element","args-arr__4839__auto__","len__4818__auto__","i__4819__auto__","argseq__4840__auto__","cljs.core/IndexedSeq","seq36747","G__36748","cljs.core/first","cljs.core/next","G__36749","self__4805__auto__","clojure.data.xml.node.element_STAR_","clojure.data.xml.node/cdata","clojure.data.xml.node/xml-comment","p__36761","map__36762","cljs.core/--destructure-map","clojure.data.xml.node/map->Element","el","cljs.core/meta","clojure.data.xml.node/tagged-element","cljs.core/map?","cljs.core.ex_info","clojure.data.xml.node/element?"],"sourcesContent":[";   Copyright (c) Rich Hickey. All rights reserved.\n;   The use and distribution terms for this software are covered by the\n;   Eclipse Public License 1.0 (http://opensource.org/licenses/eclipse-1.0.php)\n;   which can be found in the file epl-v10.html at the root of this distribution.\n;   By using this software in any fashion, you are agreeing to be bound by\n;   the terms of this license.\n;   You must not remove this notice, or any other, from this software.\n\n(ns clojure.data.xml.node\n  \"Data types for xml nodes: Element, CData and Comment\"\n  {:author \"Herwig Hochleitner\"}\n  (:require [clojure.data.xml.name :refer [as-qname]])\n  #?(:clj (:import (clojure.lang IHashEq IObj ILookup IKeywordLookup Counted\n                                 Associative Seqable IPersistentMap\n                                 APersistentMap RT MapEquivalence MapEntry)\n                   (java.io Serializable Writer)\n                   (java.util Map Iterator))))\n\n;; Parsed data format\n;; Represents a node of an XML tree\n\n;; We implement a custom deftype for elements\n;; it is similar to (defrecord Element [tag attrs content])\n;; but we override its hash and equality to be compatible with\n;; clojure's hash-maps\n;; see http://dev.clojure.org/jira/browse/CLJ-2084\n;; also, elements don't have an extmap and degrade to hash-maps also\n;; when assoc'ing unknown keys\n\n;; FIXME hash caching cannot be used: http://dev.clojure.org/jira/browse/CLJ-2092\n\n#?\n(:clj\n (deftype ElementIterator [el ^:volatile-mutable fields]\n   Iterator\n   (hasNext [_] (boolean (seq fields)))\n   (next [_]\n     (let [f (first fields)]\n       (set! fields (next fields))\n       (MapEntry. f (get el f))))))\n\n(deftype Element [tag attrs content meta]\n\n  ;; serializing/cloning, hashing, equality, iteration\n\n  #?@\n  (:clj\n   [Serializable\n    MapEquivalence\n    IHashEq\n    (hasheq [this] (APersistentMap/mapHasheq this))\n    Iterable\n    (iterator [this] (ElementIterator. this '(:tag :attrs :content)))]\n   :cljs\n   [ICloneable\n    (-clone [_] (Element. tag attrs content meta))\n    IHash\n    (-hash [this] (hash-unordered-coll this))\n    IEquiv\n    (-equiv [this other] (or (identical? this other)\n                             ^boolean (js/cljs.core.equiv_map this other)))\n    IIterable\n    (-iterator [this] (RecordIter. 0 this 3 [:tag :attrs :content] (nil-iter)))])\n  Object\n  (toString [_]\n    (let [qname (as-qname tag)]\n      (apply str (concat [\"<\" qname]\n                         (mapcat (fn [[n a]]\n                                   [\" \" (as-qname n) \"=\" (pr-str a)])\n                                 attrs)\n                         (if (seq content)\n                           (concat [\">\"] content [\"</\" qname \">\"])\n                           [\"/>\"])))))\n  #?@(:clj\n      [(hashCode [this] (APersistentMap/mapHash this))\n       (equals [this other] (APersistentMap/mapEquals this other))\n       IPersistentMap\n       (equiv [this other] (APersistentMap/mapEquals this other))])\n\n  ;; Main collection interfaces, that are included in IPersistentMap,\n  ;; but are separate protocols in cljs\n\n  #?(:cljs ILookup)\n  (#?(:clj valAt :cljs -lookup) [this k]\n    (#?(:clj .valAt :cljs -lookup)\n     this k nil))\n  (#?(:clj valAt :cljs -lookup) [this k nf]\n    (case k\n      :tag tag\n      :attrs attrs\n      :content content\n      nf))\n  #?(:cljs ICounted)\n  (#?(:clj count :cljs -count) [this] 3)\n  #?(:cljs ICollection)\n  (#?(:clj cons :cljs -conj) [this entry]\n    (conj (with-meta {:tag tag :attrs attrs :content content} meta)\n          entry))\n  #?(:cljs IAssociative)\n  (#?(:clj assoc :cljs -assoc) [this k v]\n    (case k\n      :tag (Element. v attrs content meta)\n      :attrs (Element. tag v content meta)\n      :content (Element. tag attrs v meta)\n      (with-meta {:tag tag :attrs attrs :content content k v} meta)))\n  #?(:cljs IMap)\n  (#?(:clj without :cljs -dissoc) [this k]\n    (with-meta\n      (case k\n        :tag {:attrs attrs :content content}\n        :attrs {:tag tag :content content}\n        :content {:tag tag :attrs attrs}\n        this)\n      meta))\n  #?@(:cljs\n      [ISeqable\n       (-seq [this]\n             (seq [[:tag tag] [:attrs attrs] [:content content]]))]\n      :clj\n      [(seq [this] (iterator-seq (.iterator this)))])\n\n  #?(:clj (empty [_] (Element. tag {} [] {})))\n  #?@(:cljs\n      [IEmptyableCollection\n       (-empty [_] (Element. tag {} [] {}))])\n\n  ;; j.u.Map and included interfaces\n  #?@(:clj\n      [Map\n       (entrySet [this] (set this))\n       (values [this] (vals this))\n       (keySet [this] (set (keys this)))\n       (get [this k] (.valAt this k))\n       (containsKey [this k] (case k (:tag :attrs :content) true false))\n       (containsValue [this v] (boolean (some #{v} (vals this))))\n       (isEmpty [this] false)\n       (size [this] 3)])\n\n  ;; Metadata interface\n\n  #?(:clj IObj :cljs IMeta)\n  (#?(:clj meta :cljs -meta) [this] meta)\n  #?(:cljs IWithMeta)\n  (#?(:clj withMeta :cljs -with-meta) [this next-meta]\n    (Element. tag attrs content next-meta))\n\n  ;; cljs printing is protocol-based\n\n  #?@\n  (:cljs\n   [IPrintWithWriter\n    (-pr-writer [this writer opts]\n                (-write writer \"#xml/element{:tag \")\n                (pr-writer tag writer opts)\n                (when-not (empty? attrs)\n                  (-write writer \", :attrs \")\n                  (pr-writer attrs writer opts))\n                (when-not (empty? content)\n                  (-write writer \", :content \")\n                  (pr-sequential-writer writer pr-writer \"[\" \" \" \"]\" opts content))\n                (-write writer \"}\"))]))\n\n;; clj printing is a multimethod\n\n#?\n(:clj\n (defmethod print-method Element [{:keys [tag attrs content]} ^Writer writer]\n   (.write writer \"#xml/element{:tag \")\n   (print-method tag writer)\n   (when-not (empty? attrs)\n     (.write writer \", :attrs \")\n     (print-method attrs writer))\n   (when-not (empty? content)\n     (.write writer \", :content [\")\n     (print-method (first content) writer)\n     (doseq [c (next content)]\n       (.write writer \" \")\n       (print-method c writer))\n     (.write writer \"]\"))\n   (.write writer \"}\")))\n\n(defrecord CData [content])\n(defrecord Comment [content])\n\n(defn element*\n  \"Create an xml element from a content collection and optional metadata\"\n  ([tag attrs content meta]\n   (Element. tag (or attrs {}) (remove nil? content) meta))\n  ([tag attrs content]\n   (Element. tag (or attrs {}) (remove nil? content) nil)))\n\n#?(:clj\n   ;; Compiler macro for inlining the two constructors\n   (alter-meta! #'element* assoc :inline\n                (fn\n                  ([tag attrs content meta]\n                   `(Element. ~tag (or ~attrs {}) (remove nil? ~content) ~meta))\n                  ([tag attrs content]\n                   `(Element. ~tag (or ~attrs {}) (remove nil? ~content) nil)))))\n\n(defn element\n  \"Create an xml Element from content varargs\"\n  ([tag] (element* tag nil nil))\n  ([tag attrs] (element* tag attrs nil))\n  ([tag attrs & content] (element* tag attrs content)))\n\n(defn cdata\n  \"Create a CData node\"\n  [content]\n  (CData. content))\n\n(defn xml-comment\n  \"Create a Comment node\"\n  [content]\n  (Comment. content))\n\n(defn map->Element [{:keys [tag attrs content] :as el}]\n  (element* tag attrs content (meta el)))\n\n(defn tagged-element [el]\n  (cond (map? el) (map->Element el)\n        ;; TODO support hiccup syntax\n        :else (throw (ex-info \"Unsupported element representation\"\n                              {:element el}))))\n\n(defn element? [el]\n  (and (map? el) (some? (:tag el))))\n"]}